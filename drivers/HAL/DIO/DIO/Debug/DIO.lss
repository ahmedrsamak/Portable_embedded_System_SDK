
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a7  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000620  00000000  00000000  00000c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <dio_set_port_dir>:
 */ 
#include "hal_dio.h"
int ret;
void dio_set_port_dir(port_base port,dir mode)
{
	(*(volatile port_base*)(port-1)) = mode;
  7c:	e8 2f       	mov	r30, r24
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	60 83       	st	Z, r22
  84:	08 95       	ret

00000086 <dio_set_pin_dir>:
}
void dio_set_pin_dir(port_base port,u8 pin,dir mode)
{
	if (mode==OUTPUT)
  86:	4f 3f       	cpi	r20, 0xFF	; 255
  88:	69 f4       	brne	.+26     	; 0xa4 <dio_set_pin_dir+0x1e>
	{
		(*(volatile port_base*)(port-1))|=(1<<pin);
  8a:	e8 2f       	mov	r30, r24
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	22 91       	ld	r18, -Z
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <dio_set_pin_dir+0x14>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	6a 95       	dec	r22
  9c:	e2 f7       	brpl	.-8      	; 0x96 <dio_set_pin_dir+0x10>
  9e:	82 2b       	or	r24, r18
  a0:	80 83       	st	Z, r24
  a2:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port-1))&=~(1<<pin);
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	22 91       	ld	r18, -Z
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <dio_set_pin_dir+0x2e>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <dio_set_pin_dir+0x2a>
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <dio_write_port>:
	}
}
void dio_write_port(port_base port,state mode)
{
	(*(volatile port_base*)(port))=mode;
  c0:	e8 2f       	mov	r30, r24
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	60 83       	st	Z, r22
  c6:	08 95       	ret

000000c8 <dio_write_pin>:
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
  c8:	4f 3f       	cpi	r20, 0xFF	; 255
  ca:	69 f4       	brne	.+26     	; 0xe6 <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	20 81       	ld	r18, Z
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <dio_write_pin+0x14>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <dio_write_pin+0x10>
  e0:	82 2b       	or	r24, r18
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	20 81       	ld	r18, Z
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <dio_write_pin+0x2e>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <dio_write_pin+0x2a>
  fa:	80 95       	com	r24
  fc:	82 23       	and	r24, r18
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <dio_read_port>:
	}
}
u8 dio_read_port(port_base port)
{
	return(*(volatile port_base*)(port-2));
 102:	e8 2f       	mov	r30, r24
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	32 97       	sbiw	r30, 0x02	; 2
 108:	80 81       	ld	r24, Z
}
 10a:	08 95       	ret

0000010c <dio_read_pin>:
u8 dio_read_pin(port_base port,u8 pin)
{
	
	return ((*(volatile port_base*)(port-2))&(1<<pin))>>pin;
 10c:	e8 2f       	mov	r30, r24
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	32 97       	sbiw	r30, 0x02	; 2
 112:	20 81       	ld	r18, Z
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	06 2e       	mov	r0, r22
 11a:	02 c0       	rjmp	.+4      	; 0x120 <dio_read_pin+0x14>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <dio_read_pin+0x10>
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	82 23       	and	r24, r18
 128:	93 23       	and	r25, r19
 12a:	02 c0       	rjmp	.+4      	; 0x130 <dio_read_pin+0x24>
 12c:	95 95       	asr	r25
 12e:	87 95       	ror	r24
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <dio_read_pin+0x20>
	
}
 134:	08 95       	ret

00000136 <main>:


#include "hal_dio.h"
int main(void)
{
   dio_set_port_dir(PORTA,OUTPUT);
 136:	6f ef       	ldi	r22, 0xFF	; 255
 138:	8b e3       	ldi	r24, 0x3B	; 59
 13a:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_set_port_dir>
   dio_set_port_dir(PORTB,INPUT);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_set_port_dir>
   dio_set_pin_dir(PORTC,3,OUTPUT);
 146:	4f ef       	ldi	r20, 0xFF	; 255
 148:	63 e0       	ldi	r22, 0x03	; 3
 14a:	85 e3       	ldi	r24, 0x35	; 53
 14c:	0e 94 43 00 	call	0x86	; 0x86 <dio_set_pin_dir>
   dio_set_pin_dir(PORTC,4,INPUT);
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	64 e0       	ldi	r22, 0x04	; 4
 154:	85 e3       	ldi	r24, 0x35	; 53
 156:	0e 94 43 00 	call	0x86	; 0x86 <dio_set_pin_dir>
   dio_write_port(PORTA,HIGH);
 15a:	6f ef       	ldi	r22, 0xFF	; 255
 15c:	8b e3       	ldi	r24, 0x3B	; 59
 15e:	0e 94 60 00 	call	0xc0	; 0xc0 <dio_write_port>
   dio_write_port(PORTA,LOW);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8b e3       	ldi	r24, 0x3B	; 59
 166:	0e 94 60 00 	call	0xc0	; 0xc0 <dio_write_port>
   dio_write_pin(PORTC,3,HIGH);
 16a:	4f ef       	ldi	r20, 0xFF	; 255
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	85 e3       	ldi	r24, 0x35	; 53
 170:	0e 94 64 00 	call	0xc8	; 0xc8 <dio_write_pin>
   dio_write_pin(PORTC,3,LOW);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	85 e3       	ldi	r24, 0x35	; 53
 17a:	0e 94 64 00 	call	0xc8	; 0xc8 <dio_write_pin>
   dio_read_port(PORTB);
 17e:	88 e3       	ldi	r24, 0x38	; 56
 180:	0e 94 81 00 	call	0x102	; 0x102 <dio_read_port>
   dio_read_pin(PORTC,4);
 184:	64 e0       	ldi	r22, 0x04	; 4
 186:	85 e3       	ldi	r24, 0x35	; 53
 188:	0e 94 86 00 	call	0x10c	; 0x10c <dio_read_pin>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x56>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
