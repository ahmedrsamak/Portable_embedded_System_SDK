
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a9  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000620  00000000  00000000  00000c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  74:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <dio_set_port_dir>:
 */ 
#include "hal_dio.h"
int ret;
void dio_set_port_dir(port_base port,dir mode)
{
	if (mode==OUTPUT)
  7c:	6f 3f       	cpi	r22, 0xFF	; 255
  7e:	31 f4       	brne	.+12     	; 0x8c <dio_set_port_dir+0x10>
	{
		(*(volatile port_base*)(port-1))=0xFF;
  80:	e8 2f       	mov	r30, r24
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	80 83       	st	Z, r24
  8a:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port-1))=0x00;
  8c:	e8 2f       	mov	r30, r24
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	10 82       	st	Z, r1
  94:	08 95       	ret

00000096 <dio_set_pin_dir>:
	}
}
void dio_set_pin_dir(port_base port,u8 pin,dir mode)
{
	if (mode==OUTPUT)
  96:	4f 3f       	cpi	r20, 0xFF	; 255
  98:	69 f4       	brne	.+26     	; 0xb4 <dio_set_pin_dir+0x1e>
	{
		(*(volatile port_base*)(port-1))|=(1<<pin);
  9a:	e8 2f       	mov	r30, r24
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	22 91       	ld	r18, -Z
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <dio_set_pin_dir+0x14>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <dio_set_pin_dir+0x10>
  ae:	82 2b       	or	r24, r18
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port-1))&=~(1<<pin);
  b4:	e8 2f       	mov	r30, r24
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	22 91       	ld	r18, -Z
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <dio_set_pin_dir+0x2e>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <dio_set_pin_dir+0x2a>
  c8:	80 95       	com	r24
  ca:	82 23       	and	r24, r18
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <dio_write_port>:
	}
}
void dio_write_port(port_base port,state mode)
{
	if (mode==HIGH)
  d0:	61 30       	cpi	r22, 0x01	; 1
  d2:	29 f4       	brne	.+10     	; 0xde <dio_write_port+0xe>
	{
		(*(volatile port_base*)(port))=0xFF;
  d4:	e8 2f       	mov	r30, r24
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))=0x00;
  de:	e8 2f       	mov	r30, r24
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
  e4:	08 95       	ret

000000e6 <dio_write_pin>:
	}
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
  e6:	41 30       	cpi	r20, 0x01	; 1
  e8:	69 f4       	brne	.+26     	; 0x104 <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	20 81       	ld	r18, Z
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_write_pin+0x14>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_write_pin+0x10>
  fe:	82 2b       	or	r24, r18
 100:	80 83       	st	Z, r24
 102:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
 104:	e8 2f       	mov	r30, r24
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	20 81       	ld	r18, Z
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <dio_write_pin+0x2e>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <dio_write_pin+0x2a>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <dio_read_port>:
	}
}
u8 dio_read_port(port_base port)
{
	return(*(volatile port_base*)(port-2));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	32 97       	sbiw	r30, 0x02	; 2
 126:	80 81       	ld	r24, Z
}
 128:	08 95       	ret

0000012a <dio_read_pin>:
u8 dio_read_pin(port_base port,u8 pin)
{
	
	return ((*(volatile port_base*)(port-2))&(1<<pin))>>pin;
 12a:	e8 2f       	mov	r30, r24
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	32 97       	sbiw	r30, 0x02	; 2
 130:	20 81       	ld	r18, Z
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	06 2e       	mov	r0, r22
 138:	02 c0       	rjmp	.+4      	; 0x13e <dio_read_pin+0x14>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <dio_read_pin+0x10>
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	82 23       	and	r24, r18
 146:	93 23       	and	r25, r19
 148:	02 c0       	rjmp	.+4      	; 0x14e <dio_read_pin+0x24>
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <dio_read_pin+0x20>
	
 152:	08 95       	ret

00000154 <main>:


#include "hal_dio.h"
int main(void)
{
   dio_set_port_dir(PORTA,OUTPUT);
 154:	6f ef       	ldi	r22, 0xFF	; 255
 156:	8b e3       	ldi	r24, 0x3B	; 59
 158:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_set_port_dir>
   dio_set_port_dir(PORTB,INPUT);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_set_port_dir>
   dio_set_pin_dir(PORTC,3,OUTPUT);
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	85 e3       	ldi	r24, 0x35	; 53
 16a:	0e 94 4b 00 	call	0x96	; 0x96 <dio_set_pin_dir>
   dio_set_pin_dir(PORTC,4,INPUT);
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	64 e0       	ldi	r22, 0x04	; 4
 172:	85 e3       	ldi	r24, 0x35	; 53
 174:	0e 94 4b 00 	call	0x96	; 0x96 <dio_set_pin_dir>
   dio_write_port(PORTA,HIGH);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	8b e3       	ldi	r24, 0x3B	; 59
 17c:	0e 94 68 00 	call	0xd0	; 0xd0 <dio_write_port>
   dio_write_port(PORTA,LOW);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	8b e3       	ldi	r24, 0x3B	; 59
 184:	0e 94 68 00 	call	0xd0	; 0xd0 <dio_write_port>
   dio_write_pin(PORTC,3,HIGH);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	85 e3       	ldi	r24, 0x35	; 53
 18e:	0e 94 73 00 	call	0xe6	; 0xe6 <dio_write_pin>
   dio_write_pin(PORTC,3,LOW);
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	63 e0       	ldi	r22, 0x03	; 3
 196:	85 e3       	ldi	r24, 0x35	; 53
 198:	0e 94 73 00 	call	0xe6	; 0xe6 <dio_write_pin>
   dio_read_port(PORTB);
 19c:	88 e3       	ldi	r24, 0x38	; 56
 19e:	0e 94 90 00 	call	0x120	; 0x120 <dio_read_port>
   dio_read_pin(PORTC,4);
 1a2:	64 e0       	ldi	r22, 0x04	; 4
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	0e 94 95 00 	call	0x12a	; 0x12a <dio_read_pin>
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <main+0x56>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
