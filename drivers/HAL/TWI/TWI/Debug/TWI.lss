
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000832  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000608  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000359  00000000  00000000  00001122  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_Init>:
 *  Author: Eng/Hossam Adel
 *  Modified by Ahmed Samak
 */ 
#include "twi.h"
void TWI_Init(u16 freq,u8 slave_addr)
{
  6c:	cf 93       	push	r28
  6e:	c6 2f       	mov	r28, r22
    // freq -> Enter freq with KHz for example 400 is 400KHz
    TWBR=(F_CPU/(2000L*freq)-8);
  70:	9c 01       	movw	r18, r24
  72:	a0 ed       	ldi	r26, 0xD0	; 208
  74:	b7 e0       	ldi	r27, 0x07	; 7
  76:	0e 94 a9 00 	call	0x152	; 0x152 <__umulhisi3>
  7a:	9b 01       	movw	r18, r22
  7c:	ac 01       	movw	r20, r24
  7e:	60 e0       	ldi	r22, 0x00	; 0
  80:	72 e1       	ldi	r23, 0x12	; 18
  82:	8a e7       	ldi	r24, 0x7A	; 122
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 8a 00 	call	0x114	; 0x114 <__divmodsi4>
  8a:	28 50       	subi	r18, 0x08	; 8
  8c:	20 b9       	out	0x00, r18	; 0
	TWSR=0x00;
  8e:	11 b8       	out	0x01, r1	; 1
    // Two Wire Bus address my address if any master device want to call me: use addr (used in case this MC is a slave device)
    // General Call Recognition: Off
   TWAR=slave_addr<<1; // my address masking with first bit 	
  90:	cc 0f       	add	r28, r28
  92:	c2 b9       	out	0x02, r28	; 2
    TWCR=(1<<2); //enable TWI
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	86 bf       	out	0x36, r24	; 54
}
  98:	cf 91       	pop	r28
  9a:	08 95       	ret

0000009c <TWI_Start>:
{
    /* Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
   TWCR = (1 << 7) | (1 << 5) | (1 << 2);
  9c:	84 ea       	ldi	r24, 0xA4	; 164
  9e:	86 bf       	out	0x36, r24	; 54
    
    // Wait for TWINT flag set in TWCR Register (start bit is send successfully) 
    while (!(TWCR & (1 << 7)));
  a0:	06 b6       	in	r0, 0x36	; 54
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <TWI_Start+0x4>
}
  a6:	08 95       	ret

000000a8 <TWI_Stop>:
{
    /* Clear the TWINT flag before sending the stop bit TWINT=1
	 * Enable TWI Module TWEN=1 
	 * send the stop bit by TWSTO=1
	 */
    TWCR = (1 << 7) | (1 << 2) | (1 << 4);
  a8:	84 e9       	ldi	r24, 0x94	; 148
  aa:	86 bf       	out	0x36, r24	; 54
  ac:	08 95       	ret

000000ae <TWI_Write>:
}

void TWI_Write(u8 data)
{
    // Put data On TWI Register
    TWDR = data;
  ae:	83 b9       	out	0x03, r24	; 3
    /* Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << 7) | (1 << 2);
  b0:	84 e8       	ldi	r24, 0x84	; 132
  b2:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register(data is send successfully) 
    while (!(TWCR & (1 << 7)));
  b4:	06 b6       	in	r0, 0x36	; 54
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <TWI_Write+0x6>
}
  ba:	08 95       	ret

000000bc <main>:

#include "twi.h"
#include <util/delay.h>
int main(void)
{
    TWI_Init(500,0x01);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	84 ef       	ldi	r24, 0xF4	; 244
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <TWI_Init>
	TWI_Start();
  c6:	0e 94 4e 00 	call	0x9c	; 0x9c <TWI_Start>
	TWI_Write(0xF2);
  ca:	82 ef       	ldi	r24, 0xF2	; 242
  cc:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Write(0xFE);
  d0:	8e ef       	ldi	r24, 0xFE	; 254
  d2:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Write(0xFA);
  d6:	8a ef       	ldi	r24, 0xFA	; 250
  d8:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Write(0xFD);
  dc:	8d ef       	ldi	r24, 0xFD	; 253
  de:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Write(0xF8);
  e2:	88 ef       	ldi	r24, 0xF8	; 248
  e4:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Stop();
  e8:	0e 94 54 00 	call	0xa8	; 0xa8 <TWI_Stop>
	//_delay_ms(5000);
	TWI_Start();
  ec:	0e 94 4e 00 	call	0x9c	; 0x9c <TWI_Start>
	TWI_Write(0xF0);
  f0:	80 ef       	ldi	r24, 0xF0	; 240
  f2:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Write(0xF2);
  f6:	82 ef       	ldi	r24, 0xF2	; 242
  f8:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Write(0xF4);
  fc:	84 ef       	ldi	r24, 0xF4	; 244
  fe:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Write(0xF6);
 102:	86 ef       	ldi	r24, 0xF6	; 246
 104:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Write(0xF8);
 108:	88 ef       	ldi	r24, 0xF8	; 248
 10a:	0e 94 57 00 	call	0xae	; 0xae <TWI_Write>
	TWI_Stop();
 10e:	0e 94 54 00 	call	0xa8	; 0xa8 <TWI_Stop>
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x56>

00000114 <__divmodsi4>:
 114:	05 2e       	mov	r0, r21
 116:	97 fb       	bst	r25, 7
 118:	1e f4       	brtc	.+6      	; 0x120 <__divmodsi4+0xc>
 11a:	00 94       	com	r0
 11c:	0e 94 a1 00 	call	0x142	; 0x142 <__negsi2>
 120:	57 fd       	sbrc	r21, 7
 122:	07 d0       	rcall	.+14     	; 0x132 <__divmodsi4_neg2>
 124:	0e 94 b8 00 	call	0x170	; 0x170 <__udivmodsi4>
 128:	07 fc       	sbrc	r0, 7
 12a:	03 d0       	rcall	.+6      	; 0x132 <__divmodsi4_neg2>
 12c:	4e f4       	brtc	.+18     	; 0x140 <__divmodsi4_exit>
 12e:	0c 94 a1 00 	jmp	0x142	; 0x142 <__negsi2>

00000132 <__divmodsi4_neg2>:
 132:	50 95       	com	r21
 134:	40 95       	com	r20
 136:	30 95       	com	r19
 138:	21 95       	neg	r18
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	4f 4f       	sbci	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255

00000140 <__divmodsi4_exit>:
 140:	08 95       	ret

00000142 <__negsi2>:
 142:	90 95       	com	r25
 144:	80 95       	com	r24
 146:	70 95       	com	r23
 148:	61 95       	neg	r22
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	8f 4f       	sbci	r24, 0xFF	; 255
 14e:	9f 4f       	sbci	r25, 0xFF	; 255
 150:	08 95       	ret

00000152 <__umulhisi3>:
 152:	a2 9f       	mul	r26, r18
 154:	b0 01       	movw	r22, r0
 156:	b3 9f       	mul	r27, r19
 158:	c0 01       	movw	r24, r0
 15a:	a3 9f       	mul	r26, r19
 15c:	70 0d       	add	r23, r0
 15e:	81 1d       	adc	r24, r1
 160:	11 24       	eor	r1, r1
 162:	91 1d       	adc	r25, r1
 164:	b2 9f       	mul	r27, r18
 166:	70 0d       	add	r23, r0
 168:	81 1d       	adc	r24, r1
 16a:	11 24       	eor	r1, r1
 16c:	91 1d       	adc	r25, r1
 16e:	08 95       	ret

00000170 <__udivmodsi4>:
 170:	a1 e2       	ldi	r26, 0x21	; 33
 172:	1a 2e       	mov	r1, r26
 174:	aa 1b       	sub	r26, r26
 176:	bb 1b       	sub	r27, r27
 178:	fd 01       	movw	r30, r26
 17a:	0d c0       	rjmp	.+26     	; 0x196 <__udivmodsi4_ep>

0000017c <__udivmodsi4_loop>:
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	ee 1f       	adc	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	a2 17       	cp	r26, r18
 186:	b3 07       	cpc	r27, r19
 188:	e4 07       	cpc	r30, r20
 18a:	f5 07       	cpc	r31, r21
 18c:	20 f0       	brcs	.+8      	; 0x196 <__udivmodsi4_ep>
 18e:	a2 1b       	sub	r26, r18
 190:	b3 0b       	sbc	r27, r19
 192:	e4 0b       	sbc	r30, r20
 194:	f5 0b       	sbc	r31, r21

00000196 <__udivmodsi4_ep>:
 196:	66 1f       	adc	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	88 1f       	adc	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	1a 94       	dec	r1
 1a0:	69 f7       	brne	.-38     	; 0x17c <__udivmodsi4_loop>
 1a2:	60 95       	com	r22
 1a4:	70 95       	com	r23
 1a6:	80 95       	com	r24
 1a8:	90 95       	com	r25
 1aa:	9b 01       	movw	r18, r22
 1ac:	ac 01       	movw	r20, r24
 1ae:	bd 01       	movw	r22, r26
 1b0:	cf 01       	movw	r24, r30
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
