
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  0000030a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096c  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072e  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032d  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bb  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001df3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  8a:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
 (*(volatile port_base*)(port-1))
 */ 
#include "uart.h"
void uart_init(u32 baud_rate,parity_sel parity,stop_bits_sel stop_bits)
{
	UCSRB = (1 << 4) | (1 << 3); // Enable RX and TX pins
  92:	38 e1       	ldi	r19, 0x18	; 24
  94:	3a b9       	out	0x0a, r19	; 10
	 UCSRC |= (3<<1); // 8 bits mode
  96:	30 b5       	in	r19, 0x20	; 32
  98:	36 60       	ori	r19, 0x06	; 6
  9a:	30 bd       	out	0x20, r19	; 32
	 UCSRA |=(1<<1); // double speed active
  9c:	59 9a       	sbi	0x0b, 1	; 11
	 UCSRC |=(1<<7); // select reg UCSRC
  9e:	30 b5       	in	r19, 0x20	; 32
  a0:	30 68       	ori	r19, 0x80	; 128
  a2:	30 bd       	out	0x20, r19	; 32
	 UCSRC |=(parity<<4); // select parity
  a4:	30 b5       	in	r19, 0x20	; 32
  a6:	e0 e1       	ldi	r30, 0x10	; 16
  a8:	4e 9f       	mul	r20, r30
  aa:	a0 01       	movw	r20, r0
  ac:	11 24       	eor	r1, r1
  ae:	43 2b       	or	r20, r19
  b0:	40 bd       	out	0x20, r20	; 32
	 UCSRC |=(stop_bits<<3); // select stop_bits
  b2:	30 b5       	in	r19, 0x20	; 32
  b4:	22 0f       	add	r18, r18
  b6:	22 0f       	add	r18, r18
  b8:	22 0f       	add	r18, r18
  ba:	23 2b       	or	r18, r19
  bc:	20 bd       	out	0x20, r18	; 32
	 UCSRC |=(1<<7); // select reg UCSRC
  be:	20 b5       	in	r18, 0x20	; 32
  c0:	20 68       	ori	r18, 0x80	; 128
  c2:	20 bd       	out	0x20, r18	; 32
	 UCSRC &=~(1<<6);
  c4:	20 b5       	in	r18, 0x20	; 32
  c6:	2f 7b       	andi	r18, 0xBF	; 191
  c8:	20 bd       	out	0x20, r18	; 32
	 UBRRL &=~(1<<7);
  ca:	4f 98       	cbi	0x09, 7	; 9
	 UBRRL = (u8)(( (F_CPU / (8L * baud_rate) ))); // set baud_rate
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	aa 1f       	adc	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	aa 1f       	adc	r26, r26
  de:	bb 1f       	adc	r27, r27
  e0:	9c 01       	movw	r18, r24
  e2:	ad 01       	movw	r20, r26
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	44 1f       	adc	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	72 e1       	ldi	r23, 0x12	; 18
  f0:	8a e7       	ldi	r24, 0x7A	; 122
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 de 00 	call	0x1bc	; 0x1bc <__udivmodsi4>
  f8:	29 b9       	out	0x09, r18	; 9
	 UBRRH = (u8)((( (F_CPU / (8L * baud_rate))))>>8); // set baud_rate
  fa:	bb 27       	eor	r27, r27
  fc:	a5 2f       	mov	r26, r21
  fe:	94 2f       	mov	r25, r20
 100:	83 2f       	mov	r24, r19
 102:	80 bd       	out	0x20, r24	; 32
 104:	08 95       	ret

00000106 <uart_write_byte>:
}

void uart_write_byte(char write_byte)
{
	while(!(UCSRA & (1<<5)));// handle it with interrupt to prevent delay
 106:	5d 9b       	sbis	0x0b, 5	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <uart_write_byte>
	UDR = write_byte;
 10a:	8c b9       	out	0x0c, r24	; 12
 10c:	08 95       	ret

0000010e <uart_write_num>:
}

void uart_write_num(s16 num)
{
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <uart_write_num+0x8>
 116:	00 d0       	rcall	.+0      	; 0x118 <uart_write_num+0xa>
 118:	00 d0       	rcall	.+0      	; 0x11a <uart_write_num+0xc>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	u8 ArrayIndex = 0;
	char s8DisplayStr[6] = {0};
 11e:	be 01       	movw	r22, r28
 120:	6f 5f       	subi	r22, 0xFF	; 255
 122:	7f 4f       	sbci	r23, 0xFF	; 255
 124:	26 e0       	ldi	r18, 0x06	; 6
 126:	fb 01       	movw	r30, r22
 128:	11 92       	st	Z+, r1
 12a:	2a 95       	dec	r18
 12c:	e9 f7       	brne	.-6      	; 0x128 <uart_write_num+0x1a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 12e:	4a e0       	ldi	r20, 0x0A	; 10
 130:	0e 94 00 01 	call	0x200	; 0x200 <__itoa_ncheck>
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	88 23       	and	r24, r24
 138:	69 f0       	breq	.+26     	; 0x154 <uart_write_num+0x46>
 13a:	10 e0       	ldi	r17, 0x00	; 0
	{
		uart_write_byte(s8DisplayStr[ArrayIndex]);
 13c:	0e 94 83 00 	call	0x106	; 0x106 <uart_write_byte>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 140:	1f 5f       	subi	r17, 0xFF	; 255
 142:	e1 e0       	ldi	r30, 0x01	; 1
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ec 0f       	add	r30, r28
 148:	fd 1f       	adc	r31, r29
 14a:	e1 0f       	add	r30, r17
 14c:	f1 1d       	adc	r31, r1
 14e:	80 81       	ld	r24, Z
 150:	81 11       	cpse	r24, r1
 152:	f4 cf       	rjmp	.-24     	; 0x13c <uart_write_num+0x2e>
	{
		uart_write_byte(s8DisplayStr[ArrayIndex]);
	}		
}
 154:	26 96       	adiw	r28, 0x06	; 6
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <uart_read_byte>:

char uart_read_byte()
{
	while (! ((UCSRA) & (1 << 7)));
 168:	5f 9b       	sbis	0x0b, 7	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <uart_read_byte>
	return UDR;
 16c:	8c b1       	in	r24, 0x0c	; 12
}
 16e:	08 95       	ret

00000170 <uart_write_text>:
void uart_write_text(char * write_text)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	 while(*write_text>0)
 176:	88 81       	ld	r24, Y
 178:	88 23       	and	r24, r24
 17a:	31 f0       	breq	.+12     	; 0x188 <uart_write_text+0x18>
 17c:	21 96       	adiw	r28, 0x01	; 1
	 {
		 uart_write_byte(*write_text++);
 17e:	0e 94 83 00 	call	0x106	; 0x106 <uart_write_byte>
	while (! ((UCSRA) & (1 << 7)));
	return UDR;
}
void uart_write_text(char * write_text)
{
	 while(*write_text>0)
 182:	89 91       	ld	r24, Y+
 184:	81 11       	cpse	r24, r1
 186:	fb cf       	rjmp	.-10     	; 0x17e <uart_write_text+0xe>
	 {
		 uart_write_byte(*write_text++);
	 }
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <main>:
 */ 
#include "uart.h"
char x;
int main(void)
{
    uart_init(115200,NONE,ONE_BIT);
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	72 ec       	ldi	r23, 0xC2	; 194
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>
	uart_write_text("Start\r\n");
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 b8 00 	call	0x170	; 0x170 <uart_write_text>
	uart_write_num(-124);
 1a6:	84 e8       	ldi	r24, 0x84	; 132
 1a8:	9f ef       	ldi	r25, 0xFF	; 255
 1aa:	0e 94 87 00 	call	0x10e	; 0x10e <uart_write_num>
    while (1) 
    {
		x=uart_read_byte();
 1ae:	0e 94 b4 00 	call	0x168	; 0x168 <uart_read_byte>
 1b2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		uart_write_byte(x);
 1b6:	0e 94 83 00 	call	0x106	; 0x106 <uart_write_byte>
 1ba:	f9 cf       	rjmp	.-14     	; 0x1ae <main+0x20>

000001bc <__udivmodsi4>:
 1bc:	a1 e2       	ldi	r26, 0x21	; 33
 1be:	1a 2e       	mov	r1, r26
 1c0:	aa 1b       	sub	r26, r26
 1c2:	bb 1b       	sub	r27, r27
 1c4:	fd 01       	movw	r30, r26
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <__udivmodsi4_ep>

000001c8 <__udivmodsi4_loop>:
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	ee 1f       	adc	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	e4 07       	cpc	r30, r20
 1d6:	f5 07       	cpc	r31, r21
 1d8:	20 f0       	brcs	.+8      	; 0x1e2 <__udivmodsi4_ep>
 1da:	a2 1b       	sub	r26, r18
 1dc:	b3 0b       	sbc	r27, r19
 1de:	e4 0b       	sbc	r30, r20
 1e0:	f5 0b       	sbc	r31, r21

000001e2 <__udivmodsi4_ep>:
 1e2:	66 1f       	adc	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	88 1f       	adc	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	1a 94       	dec	r1
 1ec:	69 f7       	brne	.-38     	; 0x1c8 <__udivmodsi4_loop>
 1ee:	60 95       	com	r22
 1f0:	70 95       	com	r23
 1f2:	80 95       	com	r24
 1f4:	90 95       	com	r25
 1f6:	9b 01       	movw	r18, r22
 1f8:	ac 01       	movw	r20, r24
 1fa:	bd 01       	movw	r22, r26
 1fc:	cf 01       	movw	r24, r30
 1fe:	08 95       	ret

00000200 <__itoa_ncheck>:
 200:	bb 27       	eor	r27, r27
 202:	4a 30       	cpi	r20, 0x0A	; 10
 204:	31 f4       	brne	.+12     	; 0x212 <__itoa_ncheck+0x12>
 206:	99 23       	and	r25, r25
 208:	22 f4       	brpl	.+8      	; 0x212 <__itoa_ncheck+0x12>
 20a:	bd e2       	ldi	r27, 0x2D	; 45
 20c:	90 95       	com	r25
 20e:	81 95       	neg	r24
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	0c 94 0c 01 	jmp	0x218	; 0x218 <__utoa_common>

00000216 <__utoa_ncheck>:
 216:	bb 27       	eor	r27, r27

00000218 <__utoa_common>:
 218:	fb 01       	movw	r30, r22
 21a:	55 27       	eor	r21, r21
 21c:	aa 27       	eor	r26, r26
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	aa 1f       	adc	r26, r26
 224:	a4 17       	cp	r26, r20
 226:	10 f0       	brcs	.+4      	; 0x22c <__utoa_common+0x14>
 228:	a4 1b       	sub	r26, r20
 22a:	83 95       	inc	r24
 22c:	50 51       	subi	r21, 0x10	; 16
 22e:	b9 f7       	brne	.-18     	; 0x21e <__utoa_common+0x6>
 230:	a0 5d       	subi	r26, 0xD0	; 208
 232:	aa 33       	cpi	r26, 0x3A	; 58
 234:	08 f0       	brcs	.+2      	; 0x238 <__utoa_common+0x20>
 236:	a9 5d       	subi	r26, 0xD9	; 217
 238:	a1 93       	st	Z+, r26
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	79 f7       	brne	.-34     	; 0x21c <__utoa_common+0x4>
 23e:	b1 11       	cpse	r27, r1
 240:	b1 93       	st	Z+, r27
 242:	11 92       	st	Z+, r1
 244:	cb 01       	movw	r24, r22
 246:	0c 94 25 01 	jmp	0x24a	; 0x24a <strrev>

0000024a <strrev>:
 24a:	dc 01       	movw	r26, r24
 24c:	fc 01       	movw	r30, r24
 24e:	67 2f       	mov	r22, r23
 250:	71 91       	ld	r23, Z+
 252:	77 23       	and	r23, r23
 254:	e1 f7       	brne	.-8      	; 0x24e <strrev+0x4>
 256:	32 97       	sbiw	r30, 0x02	; 2
 258:	04 c0       	rjmp	.+8      	; 0x262 <strrev+0x18>
 25a:	7c 91       	ld	r23, X
 25c:	6d 93       	st	X+, r22
 25e:	70 83       	st	Z, r23
 260:	62 91       	ld	r22, -Z
 262:	ae 17       	cp	r26, r30
 264:	bf 07       	cpc	r27, r31
 266:	c8 f3       	brcs	.-14     	; 0x25a <strrev+0x10>
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
