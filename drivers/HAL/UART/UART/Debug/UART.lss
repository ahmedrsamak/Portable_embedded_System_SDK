
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001a2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800066  00800066  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f9  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063b  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e5  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d2  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
 (*(volatile port_base*)(port-1))
 */ 
#include "hal_uart.h"
void uart_init(u32 baud_rate,parity_sel parity,stop_bits_sel stop_bits)
{
	UCSRB = (1 << 4) | (1 << 3); // Enable RX and TX pins
  92:	38 e1       	ldi	r19, 0x18	; 24
  94:	3a b9       	out	0x0a, r19	; 10
	 UCSRC |= (3<<1); // 8 bits mode
  96:	30 b5       	in	r19, 0x20	; 32
  98:	36 60       	ori	r19, 0x06	; 6
  9a:	30 bd       	out	0x20, r19	; 32
	 UCSRA |=(1<<1); // double speed active
  9c:	59 9a       	sbi	0x0b, 1	; 11
	 UCSRC |=(1<<7); // select reg UCSRC
  9e:	30 b5       	in	r19, 0x20	; 32
  a0:	30 68       	ori	r19, 0x80	; 128
  a2:	30 bd       	out	0x20, r19	; 32
	 UCSRC |=(parity<<4); // select parity
  a4:	30 b5       	in	r19, 0x20	; 32
  a6:	e0 e1       	ldi	r30, 0x10	; 16
  a8:	4e 9f       	mul	r20, r30
  aa:	a0 01       	movw	r20, r0
  ac:	11 24       	eor	r1, r1
  ae:	43 2b       	or	r20, r19
  b0:	40 bd       	out	0x20, r20	; 32
	 UCSRC |=(stop_bits<<3); // select stop_bits
  b2:	30 b5       	in	r19, 0x20	; 32
  b4:	22 0f       	add	r18, r18
  b6:	22 0f       	add	r18, r18
  b8:	22 0f       	add	r18, r18
  ba:	23 2b       	or	r18, r19
  bc:	20 bd       	out	0x20, r18	; 32
	 UCSRC |=(1<<7); // select reg UCSRC
  be:	20 b5       	in	r18, 0x20	; 32
  c0:	20 68       	ori	r18, 0x80	; 128
  c2:	20 bd       	out	0x20, r18	; 32
	 UCSRC &=~(1<<6);
  c4:	20 b5       	in	r18, 0x20	; 32
  c6:	2f 7b       	andi	r18, 0xBF	; 191
  c8:	20 bd       	out	0x20, r18	; 32
	 UBRRL &=~(1<<7);
  ca:	4f 98       	cbi	0x09, 7	; 9
	 UBRRL = (u8)(( (F_CPU / (8L * baud_rate) ))); // set baud_rate
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	aa 1f       	adc	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	aa 1f       	adc	r26, r26
  de:	bb 1f       	adc	r27, r27
  e0:	9c 01       	movw	r18, r24
  e2:	ad 01       	movw	r20, r26
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	44 1f       	adc	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	72 e1       	ldi	r23, 0x12	; 18
  f0:	8a e7       	ldi	r24, 0x7A	; 122
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 ad 00 	call	0x15a	; 0x15a <__udivmodsi4>
  f8:	29 b9       	out	0x09, r18	; 9
	 UBRRH = (u8)((( (F_CPU / (8L * baud_rate))))>>8); // set baud_rate
  fa:	bb 27       	eor	r27, r27
  fc:	a5 2f       	mov	r26, r21
  fe:	94 2f       	mov	r25, r20
 100:	83 2f       	mov	r24, r19
 102:	80 bd       	out	0x20, r24	; 32
 104:	08 95       	ret

00000106 <uart_write_byte>:
}

void uart_write_byte(char write_byte)
{
	while(!(UCSRA & (1<<5)));// handle it with interrupt to prevent delay
 106:	5d 9b       	sbis	0x0b, 5	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <uart_write_byte>
	UDR = write_byte;
 10a:	8c b9       	out	0x0c, r24	; 12
 10c:	08 95       	ret

0000010e <uart_read_byte>:
}

char uart_read_byte()
{
	while (! ((UCSRA) & (1 << 7)));
 10e:	5f 9b       	sbis	0x0b, 7	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <uart_read_byte>
	return UDR;
 112:	8c b1       	in	r24, 0x0c	; 12
}
 114:	08 95       	ret

00000116 <uart_write_text>:
void uart_write_text(char * write_text)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
	 while(*write_text>0)
 11c:	88 81       	ld	r24, Y
 11e:	88 23       	and	r24, r24
 120:	31 f0       	breq	.+12     	; 0x12e <uart_write_text+0x18>
 122:	21 96       	adiw	r28, 0x01	; 1
	 {
		 uart_write_byte(*write_text++);
 124:	0e 94 83 00 	call	0x106	; 0x106 <uart_write_byte>
	while (! ((UCSRA) & (1 << 7)));
	return UDR;
}
void uart_write_text(char * write_text)
{
	 while(*write_text>0)
 128:	89 91       	ld	r24, Y+
 12a:	81 11       	cpse	r24, r1
 12c:	fb cf       	rjmp	.-10     	; 0x124 <uart_write_text+0xe>
	 {
		 uart_write_byte(*write_text++);
	 }
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:
 */ 
#include "hal_uart.h"
char x;
int main(void)
{
    uart_init(115200,NONE,ONE_BIT);
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	72 ec       	ldi	r23, 0xC2	; 194
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>
	uart_write_text("Start");
 144:	80 e6       	ldi	r24, 0x60	; 96
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 8b 00 	call	0x116	; 0x116 <uart_write_text>
    while (1) 
    {
		x=uart_read_byte();
 14c:	0e 94 87 00 	call	0x10e	; 0x10e <uart_read_byte>
 150:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
		uart_write_byte(x);
 154:	0e 94 83 00 	call	0x106	; 0x106 <uart_write_byte>
 158:	f9 cf       	rjmp	.-14     	; 0x14c <main+0x18>

0000015a <__udivmodsi4>:
 15a:	a1 e2       	ldi	r26, 0x21	; 33
 15c:	1a 2e       	mov	r1, r26
 15e:	aa 1b       	sub	r26, r26
 160:	bb 1b       	sub	r27, r27
 162:	fd 01       	movw	r30, r26
 164:	0d c0       	rjmp	.+26     	; 0x180 <__udivmodsi4_ep>

00000166 <__udivmodsi4_loop>:
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	ee 1f       	adc	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	a2 17       	cp	r26, r18
 170:	b3 07       	cpc	r27, r19
 172:	e4 07       	cpc	r30, r20
 174:	f5 07       	cpc	r31, r21
 176:	20 f0       	brcs	.+8      	; 0x180 <__udivmodsi4_ep>
 178:	a2 1b       	sub	r26, r18
 17a:	b3 0b       	sbc	r27, r19
 17c:	e4 0b       	sbc	r30, r20
 17e:	f5 0b       	sbc	r31, r21

00000180 <__udivmodsi4_ep>:
 180:	66 1f       	adc	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	88 1f       	adc	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	1a 94       	dec	r1
 18a:	69 f7       	brne	.-38     	; 0x166 <__udivmodsi4_loop>
 18c:	60 95       	com	r22
 18e:	70 95       	com	r23
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	9b 01       	movw	r18, r22
 196:	ac 01       	movw	r20, r24
 198:	bd 01       	movw	r22, r26
 19a:	cf 01       	movw	r24, r30
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
