
External_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000660  000006f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800072  00800072  00000706  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001793  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b30  00000000  00000000  00002037  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a14  00000000  00000000  00002b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  0000357c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000699  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bcd  00000000  00000000  00003ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004a96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 02 	call	0x442	; 0x442 <main>
  8a:	0c 94 2e 03 	jmp	0x65c	; 0x65c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ext_eeprom_init>:
 *  Author: hossam adel
 */ 
#include "ecu_ext_eeprom.h"
void ext_eeprom_init(u8 freq)
{
	TWI_Init(freq,0x01); //init eeprom with its frequency and microcontroller slave address 0x01 is not used for eeprom
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 77 02 	call	0x4ee	; 0x4ee <TWI_Init>
  9a:	08 95       	ret

0000009c <ext_eeprom_write>:
}
void ext_eeprom_write(u8 chip_addr,u16 block_addr,u8 data)
{
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	c8 2f       	mov	r28, r24
  a4:	16 2f       	mov	r17, r22
  a6:	d4 2f       	mov	r29, r20
	 TWI_Start(); // send start bit
  a8:	0e 94 8f 02 	call	0x51e	; 0x51e <TWI_Start>
	 TWI_Write(0xA0 | (chip_addr<<1)); // write chip address with write bit is 0
  ac:	8c 2f       	mov	r24, r28
  ae:	88 0f       	add	r24, r24
  b0:	80 6a       	ori	r24, 0xA0	; 160
  b2:	0e 94 98 02 	call	0x530	; 0x530 <TWI_Write>
	 TWI_Write(block_addr); //select block address to write data to it
  b6:	81 2f       	mov	r24, r17
  b8:	0e 94 98 02 	call	0x530	; 0x530 <TWI_Write>
	 TWI_Write(data); // data to write
  bc:	8d 2f       	mov	r24, r29
  be:	0e 94 98 02 	call	0x530	; 0x530 <TWI_Write>
	 TWI_Stop(); // send stop bit
  c2:	0e 94 95 02 	call	0x52a	; 0x52a <TWI_Stop>
}
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	1f 91       	pop	r17
  cc:	08 95       	ret

000000ce <ext_eeprom_read>:
u8 ext_eeprom_read(u8 chip_addr,u16 block_addr)
{
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	c8 2f       	mov	r28, r24
  d6:	16 2f       	mov	r17, r22
	u8 data;
	TWI_Start(); // send start bit
  d8:	0e 94 8f 02 	call	0x51e	; 0x51e <TWI_Start>
	TWI_Write(0xA0 | (chip_addr<<1)); // write chip address with write bit is 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	cc 0f       	add	r28, r28
  e0:	dd 1f       	adc	r29, r29
  e2:	8c 2f       	mov	r24, r28
  e4:	80 6a       	ori	r24, 0xA0	; 160
  e6:	0e 94 98 02 	call	0x530	; 0x530 <TWI_Write>
    TWI_Write(block_addr); // select block address to read from
  ea:	81 2f       	mov	r24, r17
  ec:	0e 94 98 02 	call	0x530	; 0x530 <TWI_Write>
	TWI_Start(); // send repeated start
  f0:	0e 94 8f 02 	call	0x51e	; 0x51e <TWI_Start>
    TWI_Write(0xA0 | (chip_addr<<1) | 1); // send chip addres again with read bit is 1
  f4:	8c 2f       	mov	r24, r28
  f6:	81 6a       	ori	r24, 0xA1	; 161
  f8:	0e 94 98 02 	call	0x530	; 0x530 <TWI_Write>
	data=TWI_Read_With_NACK(); // read the data and store in variable data
  fc:	0e 94 9f 02 	call	0x53e	; 0x53e <TWI_Read_With_NACK>
 100:	c8 2f       	mov	r28, r24
	TWI_Stop(); // send stop bit
 102:	0e 94 95 02 	call	0x52a	; 0x52a <TWI_Stop>
	return data; // return data
}
 106:	8c 2f       	mov	r24, r28
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	08 95       	ret

00000110 <dio_set_pin_dir>:
	{
		(*(volatile port_base*)(port))=0x00;
	}
	else
	{
		(*(volatile port_base*)(port))=mode;
 110:	41 30       	cpi	r20, 0x01	; 1
 112:	69 f4       	brne	.+26     	; 0x12e <dio_set_pin_dir+0x1e>
 114:	e8 2f       	mov	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	22 91       	ld	r18, -Z
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <dio_set_pin_dir+0x14>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <dio_set_pin_dir+0x10>
 128:	82 2b       	or	r24, r18
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret
 12e:	e8 2f       	mov	r30, r24
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	22 91       	ld	r18, -Z
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <dio_set_pin_dir+0x2e>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <dio_set_pin_dir+0x2a>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <dio_write_pin>:
	}
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	69 f4       	brne	.+26     	; 0x168 <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
 14e:	e8 2f       	mov	r30, r24
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	20 81       	ld	r18, Z
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <dio_write_pin+0x14>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <dio_write_pin+0x10>
 162:	82 2b       	or	r24, r18
 164:	80 83       	st	Z, r24
 166:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
 168:	e8 2f       	mov	r30, r24
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	20 81       	ld	r18, Z
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <dio_write_pin+0x2e>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <dio_write_pin+0x2a>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <send_4bit_data>:
 *  Author: ahmed
 */ 

#include "ecu_lcd.h"
static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	eb 01       	movw	r28, r22
	static short int i;
	for (i=0;i<bit_mode;i++)
 192:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 196:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 19e:	08 2f       	mov	r16, r24
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	78 01       	movw	r14, r16
 1a4:	c9 01       	movw	r24, r18
 1a6:	04 96       	adiw	r24, 0x04	; 4
 1a8:	a8 01       	movw	r20, r16
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <send_4bit_data+0x2c>
 1ac:	55 95       	asr	r21
 1ae:	47 95       	ror	r20
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <send_4bit_data+0x28>
 1b4:	41 70       	andi	r20, 0x01	; 1
 1b6:	fe 01       	movw	r30, r28
 1b8:	e2 0f       	add	r30, r18
 1ba:	f3 1f       	adc	r31, r19
 1bc:	62 81       	ldd	r22, Z+2	; 0x02
 1be:	88 81       	ld	r24, Y
 1c0:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>

#include "ecu_lcd.h"
static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
	static short int i;
	for (i=0;i<bit_mode;i++)
 1c4:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 1c8:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <__data_end+0x1>
 1d4:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <__data_end>
 1d8:	24 30       	cpi	r18, 0x04	; 4
 1da:	31 05       	cpc	r19, r1
 1dc:	14 f3       	brlt	.-60     	; 0x1a2 <send_4bit_data+0x1e>
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
	}
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	6f 81       	ldd	r22, Y+7	; 0x07
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <send_4bit_data+0x66>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <send_4bit_data+0x6c>
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6f 81       	ldd	r22, Y+7	; 0x07
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
 1fa:	87 ec       	ldi	r24, 0xC7	; 199
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <send_4bit_data+0x7a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <send_4bit_data+0x80>
 204:	00 00       	nop
	_delay_us(100);
	for (i=0;i<bit_mode;i++)
 206:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 20a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 212:	a7 01       	movw	r20, r14
 214:	08 2e       	mov	r0, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <send_4bit_data+0x98>
 218:	55 95       	asr	r21
 21a:	47 95       	ror	r20
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <send_4bit_data+0x94>
 220:	41 70       	andi	r20, 0x01	; 1
 222:	fe 01       	movw	r30, r28
 224:	e8 0f       	add	r30, r24
 226:	f9 1f       	adc	r31, r25
 228:	62 81       	ldd	r22, Z+2	; 0x02
 22a:	88 81       	ld	r24, Y
 22c:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
	_delay_us(100);
	for (i=0;i<bit_mode;i++)
 230:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 234:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
 23e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 242:	84 30       	cpi	r24, 0x04	; 4
 244:	91 05       	cpc	r25, r1
 246:	2c f3       	brlt	.-54     	; 0x212 <send_4bit_data+0x8e>
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
	}
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	6f 81       	ldd	r22, Y+7	; 0x07
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	9a 95       	dec	r25
 256:	f1 f7       	brne	.-4      	; 0x254 <send_4bit_data+0xd0>
 258:	00 c0       	rjmp	.+0      	; 0x25a <send_4bit_data+0xd6>
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	6f 81       	ldd	r22, Y+7	; 0x07
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8f ec       	ldi	r24, 0xCF	; 207
 266:	97 e0       	ldi	r25, 0x07	; 7
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <send_4bit_data+0xe4>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <send_4bit_data+0xea>
 26e:	00 00       	nop
	_delay_ms(1);
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	08 95       	ret

0000027e <lcd_init>:

void lcd_init(config_lcd_pin * obj)
{
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	6e 81       	ldd	r22, Y+6	; 0x06
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	0e 94 88 00 	call	0x110	; 0x110 <dio_set_pin_dir>
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	6f 81       	ldd	r22, Y+7	; 0x07
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	0e 94 88 00 	call	0x110	; 0x110 <dio_set_pin_dir>
 2a0:	8e 01       	movw	r16, r28
 2a2:	0e 5f       	subi	r16, 0xFE	; 254
 2a4:	1f 4f       	sbci	r17, 0xFF	; 255
 2a6:	7e 01       	movw	r14, r28
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	e8 0e       	add	r14, r24
 2ac:	f1 1c       	adc	r15, r1
	for (i=0;i<bit_mode;i++)
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
 2ae:	f8 01       	movw	r30, r16
 2b0:	61 91       	ld	r22, Z+
 2b2:	8f 01       	movw	r16, r30
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	88 81       	ld	r24, Y
 2b8:	0e 94 88 00 	call	0x110	; 0x110 <dio_set_pin_dir>
void lcd_init(config_lcd_pin * obj)
{
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
	for (i=0;i<bit_mode;i++)
 2bc:	0e 15       	cp	r16, r14
 2be:	1f 05       	cpc	r17, r15
 2c0:	b1 f7       	brne	.-20     	; 0x2ae <lcd_init+0x30>
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
	}
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	6e 81       	ldd	r22, Y+6	; 0x06
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
	send_4bit_data(0x33,obj);
 2cc:	be 01       	movw	r22, r28
 2ce:	83 e3       	ldi	r24, 0x33	; 51
 2d0:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
	send_4bit_data(0x32,obj);
 2d4:	be 01       	movw	r22, r28
 2d6:	82 e3       	ldi	r24, 0x32	; 50
 2d8:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
	send_4bit_data(0x28,obj);
 2dc:	be 01       	movw	r22, r28
 2de:	88 e2       	ldi	r24, 0x28	; 40
 2e0:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
	send_4bit_data(0x0E,obj);
 2e4:	be 01       	movw	r22, r28
 2e6:	8e e0       	ldi	r24, 0x0E	; 14
 2e8:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
	send_4bit_data(0x01,obj);
 2ec:	be 01       	movw	r22, r28
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
 2f4:	8f e9       	ldi	r24, 0x9F	; 159
 2f6:	9f e0       	ldi	r25, 0x0F	; 15
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd_init+0x7a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <lcd_init+0x80>
 2fe:	00 00       	nop
	_delay_ms(2);
	send_4bit_data(0x06,obj);
 300:	be 01       	movw	r22, r28
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	08 95       	ret

00000316 <lcd_out_chr>:
void lcd_out_chr(config_lcd_pin * obj,u8 y,u8 x,char chr)
{
 316:	ff 92       	push	r15
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
 322:	16 2f       	mov	r17, r22
 324:	04 2f       	mov	r16, r20
 326:	f2 2e       	mov	r15, r18
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	6e 81       	ldd	r22, Y+6	; 0x06
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
	send_4bit_data(addr[y-1] + x-1,obj);
 332:	e1 2f       	mov	r30, r17
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	e1 5a       	subi	r30, 0xA1	; 161
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	01 50       	subi	r16, 0x01	; 1
 33c:	80 81       	ld	r24, Z
 33e:	be 01       	movw	r22, r28
 340:	80 0f       	add	r24, r16
 342:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	6e 81       	ldd	r22, Y+6	; 0x06
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
	send_4bit_data(chr,obj);
 350:	be 01       	movw	r22, r28
 352:	8f 2d       	mov	r24, r15
 354:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	08 95       	ret

00000364 <lcd_out_str>:
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	7c 01       	movw	r14, r24
 372:	06 2f       	mov	r16, r22
 374:	e9 01       	movw	r28, r18
	while(*string>0)
 376:	28 81       	ld	r18, Y
 378:	22 23       	and	r18, r18
 37a:	59 f0       	breq	.+22     	; 0x392 <lcd_out_str+0x2e>
 37c:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_out_chr(obj,y,x++,*string++);
 37e:	11 e0       	ldi	r17, 0x01	; 1
 380:	14 0f       	add	r17, r20
 382:	60 2f       	mov	r22, r16
 384:	c7 01       	movw	r24, r14
 386:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_out_chr>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	send_4bit_data(chr,obj);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 38a:	29 91       	ld	r18, Y+
	{
		lcd_out_chr(obj,y,x++,*string++);
 38c:	41 2f       	mov	r20, r17
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	send_4bit_data(chr,obj);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 38e:	21 11       	cpse	r18, r1
 390:	f6 cf       	rjmp	.-20     	; 0x37e <lcd_out_str+0x1a>
	{
		lcd_out_chr(obj,y,x++,*string++);
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	08 95       	ret

000003a0 <lcd_out_num>:
void lcd_out_num(config_lcd_pin * obj,u8 y,u8 x,s16 num)
{
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <lcd_out_num+0x10>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <lcd_out_num+0x12>
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <lcd_out_num+0x14>
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	7c 01       	movw	r14, r24
 3ba:	d6 2e       	mov	r13, r22
 3bc:	04 2f       	mov	r16, r20
 3be:	c9 01       	movw	r24, r18
	u8 ArrayIndex = 0;
	char s8DisplayStr[6] = {0};
 3c0:	be 01       	movw	r22, r28
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	26 e0       	ldi	r18, 0x06	; 6
 3c8:	fb 01       	movw	r30, r22
 3ca:	11 92       	st	Z+, r1
 3cc:	2a 95       	dec	r18
 3ce:	e9 f7       	brne	.-6      	; 0x3ca <lcd_out_num+0x2a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d0:	4a e0       	ldi	r20, 0x0A	; 10
 3d2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__itoa_ncheck>
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 3d6:	29 81       	ldd	r18, Y+1	; 0x01
 3d8:	22 23       	and	r18, r18
 3da:	99 f0       	breq	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3dc:	40 2f       	mov	r20, r16
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
 3de:	11 e0       	ldi	r17, 0x01	; 1
 3e0:	14 0f       	add	r17, r20
 3e2:	6d 2d       	mov	r22, r13
 3e4:	c7 01       	movw	r24, r14
 3e6:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_out_chr>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 3ea:	81 2f       	mov	r24, r17
 3ec:	80 1b       	sub	r24, r16
 3ee:	e1 e0       	ldi	r30, 0x01	; 1
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	ec 0f       	add	r30, r28
 3f4:	fd 1f       	adc	r31, r29
 3f6:	e8 0f       	add	r30, r24
 3f8:	f1 1d       	adc	r31, r1
 3fa:	20 81       	ld	r18, Z
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
 3fc:	41 2f       	mov	r20, r17
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 3fe:	21 11       	cpse	r18, r1
 400:	ee cf       	rjmp	.-36     	; 0x3de <lcd_out_num+0x3e>
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
	}
}
 402:	26 96       	adiw	r28, 0x06	; 6
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	08 95       	ret

0000041e <lcd_cmd>:
void lcd_cmd(config_lcd_pin * obj,enum_cmd cmd)
{
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
 426:	16 2f       	mov	r17, r22
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	6e 81       	ldd	r22, Y+6	; 0x06
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	0e 94 a5 00 	call	0x14a	; 0x14a <dio_write_pin>
	send_4bit_data(cmd,obj);
 432:	be 01       	movw	r22, r28
 434:	81 2f       	mov	r24, r17
 436:	0e 94 c2 00 	call	0x184	; 0x184 <send_4bit_data>
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	08 95       	ret

00000442 <main>:
u8 y;
int x=0;
config_lcd_pin LCD1;
int main(void)
{
	LCD1.ctrl_port=porta;
 442:	e5 e7       	ldi	r30, 0x75	; 117
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	8b e3       	ldi	r24, 0x3B	; 59
 448:	81 83       	std	Z+1, r24	; 0x01
	LCD1.data_port=portb;
 44a:	88 e3       	ldi	r24, 0x38	; 56
 44c:	80 83       	st	Z, r24
	LCD1.RS_pin=7;
 44e:	87 e0       	ldi	r24, 0x07	; 7
 450:	86 83       	std	Z+6, r24	; 0x06
	LCD1.E_pin=6;
 452:	96 e0       	ldi	r25, 0x06	; 6
 454:	97 83       	std	Z+7, r25	; 0x07
	LCD1.data_pin[0]=4;
 456:	24 e0       	ldi	r18, 0x04	; 4
 458:	22 83       	std	Z+2, r18	; 0x02
	LCD1.data_pin[1]=5;
 45a:	25 e0       	ldi	r18, 0x05	; 5
 45c:	23 83       	std	Z+3, r18	; 0x03
	LCD1.data_pin[2]=6;
 45e:	94 83       	std	Z+4, r25	; 0x04
	LCD1.data_pin[3]=7;
 460:	85 83       	std	Z+5, r24	; 0x05
    lcd_init(&LCD1);
 462:	cf 01       	movw	r24, r30
 464:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_init>
	lcd_out_str(&LCD1,1,1,"Start");
 468:	22 e6       	ldi	r18, 0x62	; 98
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	85 e7       	ldi	r24, 0x75	; 117
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_out_str>
 478:	2f ef       	ldi	r18, 0xFF	; 255
 47a:	89 e6       	ldi	r24, 0x69	; 105
 47c:	98 e1       	ldi	r25, 0x18	; 24
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <main+0x3c>
 486:	00 c0       	rjmp	.+0      	; 0x488 <main+0x46>
 488:	00 00       	nop
	_delay_ms(1000);
	lcd_cmd(&LCD1,LCD_CLEAR);	
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	85 e7       	ldi	r24, 0x75	; 117
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_cmd>
    ext_eeprom_init(100);
 494:	84 e6       	ldi	r24, 0x64	; 100
 496:	0e 94 49 00 	call	0x92	; 0x92 <ext_eeprom_init>
	ext_eeprom_write(0,01,55);
 49a:	47 e3       	ldi	r20, 0x37	; 55
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 4e 00 	call	0x9c	; 0x9c <ext_eeprom_write>
 4a6:	8f e1       	ldi	r24, 0x1F	; 31
 4a8:	9e e4       	ldi	r25, 0x4E	; 78
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <main+0x68>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <main+0x6e>
 4b0:	00 00       	nop
	_delay_ms(10);
	y=ext_eeprom_read(0,01);
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 67 00 	call	0xce	; 0xce <ext_eeprom_read>
 4bc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <y>
	lcd_cmd(&LCD1,LCD_CLEAR);
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	85 e7       	ldi	r24, 0x75	; 117
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_cmd>
   lcd_out_str(&LCD1,1,1,"data is: ");
 4ca:	28 e6       	ldi	r18, 0x68	; 104
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	85 e7       	ldi	r24, 0x75	; 117
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_out_str>
   lcd_out_num(&LCD1,2,1,(u8)y);
 4da:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <y>
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	62 e0       	ldi	r22, 0x02	; 2
 4e4:	85 e7       	ldi	r24, 0x75	; 117
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_out_num>
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <main+0xaa>

000004ee <TWI_Init>:
    TWCR = (1 << 7) | (1 << 2) | (1<<6);
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!(TWCR & (1 << 7)));
    // Read Data
    return TWDR;
}
 4ee:	cf 93       	push	r28
 4f0:	c6 2f       	mov	r28, r22
 4f2:	9c 01       	movw	r18, r24
 4f4:	a0 ed       	ldi	r26, 0xD0	; 208
 4f6:	b7 e0       	ldi	r27, 0x07	; 7
 4f8:	0e 94 c8 02 	call	0x590	; 0x590 <__umulhisi3>
 4fc:	9b 01       	movw	r18, r22
 4fe:	ac 01       	movw	r20, r24
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	72 e1       	ldi	r23, 0x12	; 18
 504:	8a e7       	ldi	r24, 0x7A	; 122
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 a9 02 	call	0x552	; 0x552 <__divmodsi4>
 50c:	28 50       	subi	r18, 0x08	; 8
 50e:	20 b9       	out	0x00, r18	; 0
 510:	11 b8       	out	0x01, r1	; 1
 512:	cc 0f       	add	r28, r28
 514:	c2 b9       	out	0x02, r28	; 2
 516:	84 e0       	ldi	r24, 0x04	; 4
 518:	86 bf       	out	0x36, r24	; 54
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <TWI_Start>:
 51e:	84 ea       	ldi	r24, 0xA4	; 164
 520:	86 bf       	out	0x36, r24	; 54
 522:	06 b6       	in	r0, 0x36	; 54
 524:	07 fe       	sbrs	r0, 7
 526:	fd cf       	rjmp	.-6      	; 0x522 <TWI_Start+0x4>
 528:	08 95       	ret

0000052a <TWI_Stop>:
 52a:	84 e9       	ldi	r24, 0x94	; 148
 52c:	86 bf       	out	0x36, r24	; 54
 52e:	08 95       	ret

00000530 <TWI_Write>:
 530:	83 b9       	out	0x03, r24	; 3
 532:	84 e8       	ldi	r24, 0x84	; 132
 534:	86 bf       	out	0x36, r24	; 54
 536:	06 b6       	in	r0, 0x36	; 54
 538:	07 fe       	sbrs	r0, 7
 53a:	fd cf       	rjmp	.-6      	; 0x536 <TWI_Write+0x6>
 53c:	08 95       	ret

0000053e <TWI_Read_With_NACK>:
{
	/* Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 * disable sending ACK TWEA=0
	 */
    TWCR = (1 << 7) | (1 << 2);
 53e:	84 e8       	ldi	r24, 0x84	; 132
 540:	86 bf       	out	0x36, r24	; 54
	TWCR &=~(1<<6);
 542:	86 b7       	in	r24, 0x36	; 54
 544:	8f 7b       	andi	r24, 0xBF	; 191
 546:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!(TWCR & (1 << 7)));
 548:	06 b6       	in	r0, 0x36	; 54
 54a:	07 fe       	sbrs	r0, 7
 54c:	fd cf       	rjmp	.-6      	; 0x548 <TWI_Read_With_NACK+0xa>
    // Read Data
    return TWDR;
 54e:	83 b1       	in	r24, 0x03	; 3
}
 550:	08 95       	ret

00000552 <__divmodsi4>:
 552:	05 2e       	mov	r0, r21
 554:	97 fb       	bst	r25, 7
 556:	1e f4       	brtc	.+6      	; 0x55e <__divmodsi4+0xc>
 558:	00 94       	com	r0
 55a:	0e 94 c0 02 	call	0x580	; 0x580 <__negsi2>
 55e:	57 fd       	sbrc	r21, 7
 560:	07 d0       	rcall	.+14     	; 0x570 <__divmodsi4_neg2>
 562:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__udivmodsi4>
 566:	07 fc       	sbrc	r0, 7
 568:	03 d0       	rcall	.+6      	; 0x570 <__divmodsi4_neg2>
 56a:	4e f4       	brtc	.+18     	; 0x57e <__divmodsi4_exit>
 56c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__negsi2>

00000570 <__divmodsi4_neg2>:
 570:	50 95       	com	r21
 572:	40 95       	com	r20
 574:	30 95       	com	r19
 576:	21 95       	neg	r18
 578:	3f 4f       	sbci	r19, 0xFF	; 255
 57a:	4f 4f       	sbci	r20, 0xFF	; 255
 57c:	5f 4f       	sbci	r21, 0xFF	; 255

0000057e <__divmodsi4_exit>:
 57e:	08 95       	ret

00000580 <__negsi2>:
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__umulhisi3>:
 590:	a2 9f       	mul	r26, r18
 592:	b0 01       	movw	r22, r0
 594:	b3 9f       	mul	r27, r19
 596:	c0 01       	movw	r24, r0
 598:	a3 9f       	mul	r26, r19
 59a:	70 0d       	add	r23, r0
 59c:	81 1d       	adc	r24, r1
 59e:	11 24       	eor	r1, r1
 5a0:	91 1d       	adc	r25, r1
 5a2:	b2 9f       	mul	r27, r18
 5a4:	70 0d       	add	r23, r0
 5a6:	81 1d       	adc	r24, r1
 5a8:	11 24       	eor	r1, r1
 5aa:	91 1d       	adc	r25, r1
 5ac:	08 95       	ret

000005ae <__udivmodsi4>:
 5ae:	a1 e2       	ldi	r26, 0x21	; 33
 5b0:	1a 2e       	mov	r1, r26
 5b2:	aa 1b       	sub	r26, r26
 5b4:	bb 1b       	sub	r27, r27
 5b6:	fd 01       	movw	r30, r26
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <__udivmodsi4_ep>

000005ba <__udivmodsi4_loop>:
 5ba:	aa 1f       	adc	r26, r26
 5bc:	bb 1f       	adc	r27, r27
 5be:	ee 1f       	adc	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	a2 17       	cp	r26, r18
 5c4:	b3 07       	cpc	r27, r19
 5c6:	e4 07       	cpc	r30, r20
 5c8:	f5 07       	cpc	r31, r21
 5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__udivmodsi4_ep>
 5cc:	a2 1b       	sub	r26, r18
 5ce:	b3 0b       	sbc	r27, r19
 5d0:	e4 0b       	sbc	r30, r20
 5d2:	f5 0b       	sbc	r31, r21

000005d4 <__udivmodsi4_ep>:
 5d4:	66 1f       	adc	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	1a 94       	dec	r1
 5de:	69 f7       	brne	.-38     	; 0x5ba <__udivmodsi4_loop>
 5e0:	60 95       	com	r22
 5e2:	70 95       	com	r23
 5e4:	80 95       	com	r24
 5e6:	90 95       	com	r25
 5e8:	9b 01       	movw	r18, r22
 5ea:	ac 01       	movw	r20, r24
 5ec:	bd 01       	movw	r22, r26
 5ee:	cf 01       	movw	r24, r30
 5f0:	08 95       	ret

000005f2 <__itoa_ncheck>:
 5f2:	bb 27       	eor	r27, r27
 5f4:	4a 30       	cpi	r20, 0x0A	; 10
 5f6:	31 f4       	brne	.+12     	; 0x604 <__itoa_ncheck+0x12>
 5f8:	99 23       	and	r25, r25
 5fa:	22 f4       	brpl	.+8      	; 0x604 <__itoa_ncheck+0x12>
 5fc:	bd e2       	ldi	r27, 0x2D	; 45
 5fe:	90 95       	com	r25
 600:	81 95       	neg	r24
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	0c 94 05 03 	jmp	0x60a	; 0x60a <__utoa_common>

00000608 <__utoa_ncheck>:
 608:	bb 27       	eor	r27, r27

0000060a <__utoa_common>:
 60a:	fb 01       	movw	r30, r22
 60c:	55 27       	eor	r21, r21
 60e:	aa 27       	eor	r26, r26
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	aa 1f       	adc	r26, r26
 616:	a4 17       	cp	r26, r20
 618:	10 f0       	brcs	.+4      	; 0x61e <__utoa_common+0x14>
 61a:	a4 1b       	sub	r26, r20
 61c:	83 95       	inc	r24
 61e:	50 51       	subi	r21, 0x10	; 16
 620:	b9 f7       	brne	.-18     	; 0x610 <__utoa_common+0x6>
 622:	a0 5d       	subi	r26, 0xD0	; 208
 624:	aa 33       	cpi	r26, 0x3A	; 58
 626:	08 f0       	brcs	.+2      	; 0x62a <__utoa_common+0x20>
 628:	a9 5d       	subi	r26, 0xD9	; 217
 62a:	a1 93       	st	Z+, r26
 62c:	00 97       	sbiw	r24, 0x00	; 0
 62e:	79 f7       	brne	.-34     	; 0x60e <__utoa_common+0x4>
 630:	b1 11       	cpse	r27, r1
 632:	b1 93       	st	Z+, r27
 634:	11 92       	st	Z+, r1
 636:	cb 01       	movw	r24, r22
 638:	0c 94 1e 03 	jmp	0x63c	; 0x63c <strrev>

0000063c <strrev>:
 63c:	dc 01       	movw	r26, r24
 63e:	fc 01       	movw	r30, r24
 640:	67 2f       	mov	r22, r23
 642:	71 91       	ld	r23, Z+
 644:	77 23       	and	r23, r23
 646:	e1 f7       	brne	.-8      	; 0x640 <strrev+0x4>
 648:	32 97       	sbiw	r30, 0x02	; 2
 64a:	04 c0       	rjmp	.+8      	; 0x654 <strrev+0x18>
 64c:	7c 91       	ld	r23, X
 64e:	6d 93       	st	X+, r22
 650:	70 83       	st	Z, r23
 652:	62 91       	ld	r22, -Z
 654:	ae 17       	cp	r26, r30
 656:	bf 07       	cpc	r27, r31
 658:	c8 f3       	brcs	.-14     	; 0x64c <strrev+0x10>
 65a:	08 95       	ret

0000065c <_exit>:
 65c:	f8 94       	cli

0000065e <__stop_program>:
 65e:	ff cf       	rjmp	.-2      	; 0x65e <__stop_program>
