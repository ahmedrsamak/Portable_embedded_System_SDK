
External_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000622  000006b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800074  00800074  000006ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ae  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b29  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009af  00000000  00000000  00002b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000034f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000682  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bcd  00000000  00000000  00003e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000049f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 02 	call	0x410	; 0x410 <main>
  8a:	0c 94 0f 03 	jmp	0x61e	; 0x61e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ext_eeprom_init>:
	 TWI_Start(); // send start bit
	 TWI_Write(0xA0 | (chip_addr<<1)); // write chip address with write bit is 0
	 TWI_Write(block_addr); //select block address to write data to it
	 TWI_Write(data); // data to write
	 TWI_Stop(); // send stop bit
}
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 58 02 	call	0x4b0	; 0x4b0 <TWI_Init>
  9a:	08 95       	ret

0000009c <ext_eeprom_read>:
u8 ext_eeprom_read(u8 chip_addr,u16 block_addr)
{
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	c8 2f       	mov	r28, r24
  a4:	16 2f       	mov	r17, r22
	u8 data;
	TWI_Start(); // send start bit
  a6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <TWI_Start>
	TWI_Write(0xA0 | (chip_addr<<1)); // write chip address with write bit is 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	cc 0f       	add	r28, r28
  ae:	dd 1f       	adc	r29, r29
  b0:	8c 2f       	mov	r24, r28
  b2:	80 6a       	ori	r24, 0xA0	; 160
  b4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <TWI_Write>
    TWI_Write(block_addr); // select block address to read from
  b8:	81 2f       	mov	r24, r17
  ba:	0e 94 79 02 	call	0x4f2	; 0x4f2 <TWI_Write>
	TWI_Start(); // send repeated start
  be:	0e 94 70 02 	call	0x4e0	; 0x4e0 <TWI_Start>
    TWI_Write(0xA0 | (chip_addr<<1) | 1); // send chip addres again with read bit is 1
  c2:	8c 2f       	mov	r24, r28
  c4:	81 6a       	ori	r24, 0xA1	; 161
  c6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <TWI_Write>
	data=TWI_Read_With_NACK(); // read the data and store in variable data
  ca:	0e 94 80 02 	call	0x500	; 0x500 <TWI_Read_With_NACK>
  ce:	c8 2f       	mov	r28, r24
	TWI_Stop(); // send stop bit
  d0:	0e 94 76 02 	call	0x4ec	; 0x4ec <TWI_Stop>
	return data; // return data
}
  d4:	8c 2f       	mov	r24, r28
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

000000de <dio_set_pin_dir>:
	{
		(*(volatile port_base*)(port))=0x00;
	}
	else
	{
		(*(volatile port_base*)(port))=mode;
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	69 f4       	brne	.+26     	; 0xfc <dio_set_pin_dir+0x1e>
  e2:	e8 2f       	mov	r30, r24
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	22 91       	ld	r18, -Z
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <dio_set_pin_dir+0x14>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <dio_set_pin_dir+0x10>
  f6:	82 2b       	or	r24, r18
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret
  fc:	e8 2f       	mov	r30, r24
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	22 91       	ld	r18, -Z
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <dio_set_pin_dir+0x2e>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <dio_set_pin_dir+0x2a>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <dio_write_pin>:
	}
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	69 f4       	brne	.+26     	; 0x136 <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
 11c:	e8 2f       	mov	r30, r24
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	20 81       	ld	r18, Z
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <dio_write_pin+0x14>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <dio_write_pin+0x10>
 130:	82 2b       	or	r24, r18
 132:	80 83       	st	Z, r24
 134:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	20 81       	ld	r18, Z
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <dio_write_pin+0x2e>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <dio_write_pin+0x2a>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <send_4bit_data>:
 */ 

#include <stdlib.h>
#include "hal_lcd.h"
static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	eb 01       	movw	r28, r22
	static short int i;
	for (i=0;i<bit_mode;i++)
 160:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 164:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 16c:	08 2f       	mov	r16, r24
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	78 01       	movw	r14, r16
 172:	c9 01       	movw	r24, r18
 174:	04 96       	adiw	r24, 0x04	; 4
 176:	a8 01       	movw	r20, r16
 178:	02 c0       	rjmp	.+4      	; 0x17e <send_4bit_data+0x2c>
 17a:	55 95       	asr	r21
 17c:	47 95       	ror	r20
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <send_4bit_data+0x28>
 182:	41 70       	andi	r20, 0x01	; 1
 184:	fe 01       	movw	r30, r28
 186:	e2 0f       	add	r30, r18
 188:	f3 1f       	adc	r31, r19
 18a:	62 81       	ldd	r22, Z+2	; 0x02
 18c:	88 81       	ld	r24, Y
 18e:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
#include <stdlib.h>
#include "hal_lcd.h"
static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
	static short int i;
	for (i=0;i<bit_mode;i++)
 192:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__data_end>
 196:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__data_end+0x1>
 19a:	2f 5f       	subi	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <__data_end+0x1>
 1a2:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__data_end>
 1a6:	24 30       	cpi	r18, 0x04	; 4
 1a8:	31 05       	cpc	r19, r1
 1aa:	14 f3       	brlt	.-60     	; 0x170 <send_4bit_data+0x1e>
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
	}
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	6f 81       	ldd	r22, Y+7	; 0x07
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <send_4bit_data+0x66>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <send_4bit_data+0x6c>
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	6f 81       	ldd	r22, Y+7	; 0x07
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
 1c8:	87 ec       	ldi	r24, 0xC7	; 199
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <send_4bit_data+0x7a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <send_4bit_data+0x80>
 1d2:	00 00       	nop
	_delay_us(100);
	for (i=0;i<bit_mode;i++)
 1d4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 1d8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 1e0:	a7 01       	movw	r20, r14
 1e2:	08 2e       	mov	r0, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <send_4bit_data+0x98>
 1e6:	55 95       	asr	r21
 1e8:	47 95       	ror	r20
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <send_4bit_data+0x94>
 1ee:	41 70       	andi	r20, 0x01	; 1
 1f0:	fe 01       	movw	r30, r28
 1f2:	e8 0f       	add	r30, r24
 1f4:	f9 1f       	adc	r31, r25
 1f6:	62 81       	ldd	r22, Z+2	; 0x02
 1f8:	88 81       	ld	r24, Y
 1fa:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
	_delay_us(100);
	for (i=0;i<bit_mode;i++)
 1fe:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 202:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 20c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	91 05       	cpc	r25, r1
 214:	2c f3       	brlt	.-54     	; 0x1e0 <send_4bit_data+0x8e>
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
	}
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	6f 81       	ldd	r22, Y+7	; 0x07
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	9a 95       	dec	r25
 224:	f1 f7       	brne	.-4      	; 0x222 <send_4bit_data+0xd0>
 226:	00 c0       	rjmp	.+0      	; 0x228 <send_4bit_data+0xd6>
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	6f 81       	ldd	r22, Y+7	; 0x07
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8f ec       	ldi	r24, 0xCF	; 207
 234:	97 e0       	ldi	r25, 0x07	; 7
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <send_4bit_data+0xe4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <send_4bit_data+0xea>
 23c:	00 00       	nop
	_delay_ms(1);
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	08 95       	ret

0000024c <lcd_init>:

void lcd_init(config_lcd_pin * obj)
{
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	ec 01       	movw	r28, r24
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	6e 81       	ldd	r22, Y+6	; 0x06
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	0e 94 6f 00 	call	0xde	; 0xde <dio_set_pin_dir>
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	6f 81       	ldd	r22, Y+7	; 0x07
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	0e 94 6f 00 	call	0xde	; 0xde <dio_set_pin_dir>
 26e:	8e 01       	movw	r16, r28
 270:	0e 5f       	subi	r16, 0xFE	; 254
 272:	1f 4f       	sbci	r17, 0xFF	; 255
 274:	7e 01       	movw	r14, r28
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	e8 0e       	add	r14, r24
 27a:	f1 1c       	adc	r15, r1
	for (i=0;i<bit_mode;i++)
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
 27c:	f8 01       	movw	r30, r16
 27e:	61 91       	ld	r22, Z+
 280:	8f 01       	movw	r16, r30
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	88 81       	ld	r24, Y
 286:	0e 94 6f 00 	call	0xde	; 0xde <dio_set_pin_dir>
void lcd_init(config_lcd_pin * obj)
{
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
	for (i=0;i<bit_mode;i++)
 28a:	0e 15       	cp	r16, r14
 28c:	1f 05       	cpc	r17, r15
 28e:	b1 f7       	brne	.-20     	; 0x27c <lcd_init+0x30>
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
	}
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	6e 81       	ldd	r22, Y+6	; 0x06
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
	send_4bit_data(0x33,obj);
 29a:	be 01       	movw	r22, r28
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
	send_4bit_data(0x32,obj);
 2a2:	be 01       	movw	r22, r28
 2a4:	82 e3       	ldi	r24, 0x32	; 50
 2a6:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
	send_4bit_data(0x28,obj);
 2aa:	be 01       	movw	r22, r28
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
	send_4bit_data(0x0E,obj);
 2b2:	be 01       	movw	r22, r28
 2b4:	8e e0       	ldi	r24, 0x0E	; 14
 2b6:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
	send_4bit_data(0x01,obj);
 2ba:	be 01       	movw	r22, r28
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
 2c2:	8f e9       	ldi	r24, 0x9F	; 159
 2c4:	9f e0       	ldi	r25, 0x0F	; 15
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_init+0x7a>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <lcd_init+0x80>
 2cc:	00 00       	nop
	_delay_ms(2);
	send_4bit_data(0x06,obj);
 2ce:	be 01       	movw	r22, r28
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	08 95       	ret

000002e4 <lcd_out_chr>:
void lcd_out_chr(config_lcd_pin * obj,u8 y,u8 x,char chr)
{
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
 2f0:	16 2f       	mov	r17, r22
 2f2:	04 2f       	mov	r16, r20
 2f4:	f2 2e       	mov	r15, r18
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	6e 81       	ldd	r22, Y+6	; 0x06
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
	send_4bit_data(addr[y-1] + x-1,obj);
 300:	e1 2f       	mov	r30, r17
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	e1 5a       	subi	r30, 0xA1	; 161
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	01 50       	subi	r16, 0x01	; 1
 30a:	80 81       	ld	r24, Z
 30c:	be 01       	movw	r22, r28
 30e:	80 0f       	add	r24, r16
 310:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	6e 81       	ldd	r22, Y+6	; 0x06
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
	send_4bit_data(chr,obj);
 31e:	be 01       	movw	r22, r28
 320:	8f 2d       	mov	r24, r15
 322:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	08 95       	ret

00000332 <lcd_out_str>:
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	7c 01       	movw	r14, r24
 340:	06 2f       	mov	r16, r22
 342:	e9 01       	movw	r28, r18
	while(*string>0)
 344:	28 81       	ld	r18, Y
 346:	22 23       	and	r18, r18
 348:	59 f0       	breq	.+22     	; 0x360 <lcd_out_str+0x2e>
 34a:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_out_chr(obj,y,x++,*string++);
 34c:	11 e0       	ldi	r17, 0x01	; 1
 34e:	14 0f       	add	r17, r20
 350:	60 2f       	mov	r22, r16
 352:	c7 01       	movw	r24, r14
 354:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_out_chr>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	send_4bit_data(chr,obj);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 358:	29 91       	ld	r18, Y+
	{
		lcd_out_chr(obj,y,x++,*string++);
 35a:	41 2f       	mov	r20, r17
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	send_4bit_data(chr,obj);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 35c:	21 11       	cpse	r18, r1
 35e:	f6 cf       	rjmp	.-20     	; 0x34c <lcd_out_str+0x1a>
	{
		lcd_out_chr(obj,y,x++,*string++);
	}
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	08 95       	ret

0000036e <lcd_out_num>:
void lcd_out_num(config_lcd_pin * obj,u8 y,u8 x,s16 num)
{
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	00 d0       	rcall	.+0      	; 0x37e <lcd_out_num+0x10>
 37e:	00 d0       	rcall	.+0      	; 0x380 <lcd_out_num+0x12>
 380:	00 d0       	rcall	.+0      	; 0x382 <lcd_out_num+0x14>
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	7c 01       	movw	r14, r24
 388:	d6 2e       	mov	r13, r22
 38a:	04 2f       	mov	r16, r20
 38c:	c9 01       	movw	r24, r18
	u8 ArrayIndex = 0;
	char s8DisplayStr[6] = {0};
 38e:	be 01       	movw	r22, r28
 390:	6f 5f       	subi	r22, 0xFF	; 255
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	26 e0       	ldi	r18, 0x06	; 6
 396:	fb 01       	movw	r30, r22
 398:	11 92       	st	Z+, r1
 39a:	2a 95       	dec	r18
 39c:	e9 f7       	brne	.-6      	; 0x398 <lcd_out_num+0x2a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 39e:	4a e0       	ldi	r20, 0x0A	; 10
 3a0:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__itoa_ncheck>
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 3a4:	29 81       	ldd	r18, Y+1	; 0x01
 3a6:	22 23       	and	r18, r18
 3a8:	99 f0       	breq	.+38     	; 0x3d0 <lcd_out_num+0x62>
 3aa:	40 2f       	mov	r20, r16
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
 3ac:	11 e0       	ldi	r17, 0x01	; 1
 3ae:	14 0f       	add	r17, r20
 3b0:	6d 2d       	mov	r22, r13
 3b2:	c7 01       	movw	r24, r14
 3b4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_out_chr>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 3b8:	81 2f       	mov	r24, r17
 3ba:	80 1b       	sub	r24, r16
 3bc:	e1 e0       	ldi	r30, 0x01	; 1
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	ec 0f       	add	r30, r28
 3c2:	fd 1f       	adc	r31, r29
 3c4:	e8 0f       	add	r30, r24
 3c6:	f1 1d       	adc	r31, r1
 3c8:	20 81       	ld	r18, Z
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
 3ca:	41 2f       	mov	r20, r17
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 3cc:	21 11       	cpse	r18, r1
 3ce:	ee cf       	rjmp	.-36     	; 0x3ac <lcd_out_num+0x3e>
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
	}
}
 3d0:	26 96       	adiw	r28, 0x06	; 6
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	08 95       	ret

000003ec <lcd_cmd>:
void lcd_cmd(config_lcd_pin * obj,enum_cmd cmd)
{
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
 3f4:	16 2f       	mov	r17, r22
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	6e 81       	ldd	r22, Y+6	; 0x06
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	0e 94 8c 00 	call	0x118	; 0x118 <dio_write_pin>
	send_4bit_data(cmd,obj);
 400:	be 01       	movw	r22, r28
 402:	81 2f       	mov	r24, r17
 404:	0e 94 a9 00 	call	0x152	; 0x152 <send_4bit_data>
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	08 95       	ret

00000410 <main>:
u8 y;
int x=0;
config_lcd_pin LCD1;
int main(void)
{
	LCD1.ctrl_port=PORTA;
 410:	e7 e7       	ldi	r30, 0x77	; 119
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	8b e3       	ldi	r24, 0x3B	; 59
 416:	81 83       	std	Z+1, r24	; 0x01
	LCD1.data_port=PORTB;
 418:	88 e3       	ldi	r24, 0x38	; 56
 41a:	80 83       	st	Z, r24
	LCD1.RS_pin=7;
 41c:	87 e0       	ldi	r24, 0x07	; 7
 41e:	86 83       	std	Z+6, r24	; 0x06
	LCD1.E_pin=6;
 420:	96 e0       	ldi	r25, 0x06	; 6
 422:	97 83       	std	Z+7, r25	; 0x07
	LCD1.data_pin[0]=4;
 424:	24 e0       	ldi	r18, 0x04	; 4
 426:	22 83       	std	Z+2, r18	; 0x02
	LCD1.data_pin[1]=5;
 428:	25 e0       	ldi	r18, 0x05	; 5
 42a:	23 83       	std	Z+3, r18	; 0x03
	LCD1.data_pin[2]=6;
 42c:	94 83       	std	Z+4, r25	; 0x04
	LCD1.data_pin[3]=7;
 42e:	85 83       	std	Z+5, r24	; 0x05
    lcd_init(&LCD1);
 430:	cf 01       	movw	r24, r30
 432:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_init>
	lcd_out_str(&LCD1,1,1,"Start1");
 436:	22 e6       	ldi	r18, 0x62	; 98
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	87 e7       	ldi	r24, 0x77	; 119
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 99 01 	call	0x332	; 0x332 <lcd_out_str>
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	89 e6       	ldi	r24, 0x69	; 105
 44a:	98 e1       	ldi	r25, 0x18	; 24
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <main+0x3c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <main+0x46>
 456:	00 00       	nop
	_delay_ms(1000);
	lcd_cmd(&LCD1,LCD_CLEAR);	
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	87 e7       	ldi	r24, 0x77	; 119
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_cmd>
    ext_eeprom_init(100);
 462:	84 e6       	ldi	r24, 0x64	; 100
 464:	0e 94 49 00 	call	0x92	; 0x92 <ext_eeprom_init>
 468:	8f e1       	ldi	r24, 0x1F	; 31
 46a:	9e e4       	ldi	r25, 0x4E	; 78
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <main+0x5c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <main+0x62>
 472:	00 00       	nop
	//ext_eeprom_write(0,01,57);
	_delay_ms(10);
	y=ext_eeprom_read(0,01);
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 4e 00 	call	0x9c	; 0x9c <ext_eeprom_read>
 47e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <y>
	lcd_cmd(&LCD1,LCD_CLEAR);
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	87 e7       	ldi	r24, 0x77	; 119
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_cmd>
   lcd_out_str(&LCD1,1,1,"data is: ");
 48c:	29 e6       	ldi	r18, 0x69	; 105
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	87 e7       	ldi	r24, 0x77	; 119
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 99 01 	call	0x332	; 0x332 <lcd_out_str>
   lcd_out_num(&LCD1,2,1,(u8)y);
 49c:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <y>
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	41 e0       	ldi	r20, 0x01	; 1
 4a4:	62 e0       	ldi	r22, 0x02	; 2
 4a6:	87 e7       	ldi	r24, 0x77	; 119
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_out_num>
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <main+0x9e>

000004b0 <TWI_Init>:
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 2) | (1<<6);
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!((*(volatile port_base*)(TWCR)) & (1 << 7)));
    // Read Data
    return (*(volatile port_base*)(TWDR));
}
 4b0:	cf 93       	push	r28
 4b2:	c6 2f       	mov	r28, r22
 4b4:	9c 01       	movw	r18, r24
 4b6:	a0 ed       	ldi	r26, 0xD0	; 208
 4b8:	b7 e0       	ldi	r27, 0x07	; 7
 4ba:	0e 94 a9 02 	call	0x552	; 0x552 <__umulhisi3>
 4be:	9b 01       	movw	r18, r22
 4c0:	ac 01       	movw	r20, r24
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	72 e1       	ldi	r23, 0x12	; 18
 4c6:	8a e7       	ldi	r24, 0x7A	; 122
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 8a 02 	call	0x514	; 0x514 <__divmodsi4>
 4ce:	28 50       	subi	r18, 0x08	; 8
 4d0:	20 b9       	out	0x00, r18	; 0
 4d2:	11 b8       	out	0x01, r1	; 1
 4d4:	cc 0f       	add	r28, r28
 4d6:	c2 b9       	out	0x02, r28	; 2
 4d8:	84 e0       	ldi	r24, 0x04	; 4
 4da:	86 bf       	out	0x36, r24	; 54
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <TWI_Start>:
 4e0:	84 ea       	ldi	r24, 0xA4	; 164
 4e2:	86 bf       	out	0x36, r24	; 54
 4e4:	06 b6       	in	r0, 0x36	; 54
 4e6:	07 fe       	sbrs	r0, 7
 4e8:	fd cf       	rjmp	.-6      	; 0x4e4 <TWI_Start+0x4>
 4ea:	08 95       	ret

000004ec <TWI_Stop>:
 4ec:	84 e9       	ldi	r24, 0x94	; 148
 4ee:	86 bf       	out	0x36, r24	; 54
 4f0:	08 95       	ret

000004f2 <TWI_Write>:
 4f2:	83 b9       	out	0x03, r24	; 3
 4f4:	84 e8       	ldi	r24, 0x84	; 132
 4f6:	86 bf       	out	0x36, r24	; 54
 4f8:	06 b6       	in	r0, 0x36	; 54
 4fa:	07 fe       	sbrs	r0, 7
 4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <TWI_Write+0x6>
 4fe:	08 95       	ret

00000500 <TWI_Read_With_NACK>:
{
	/* Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 * disable sending ACK TWEA=0
	 */
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 2);
 500:	84 e8       	ldi	r24, 0x84	; 132
 502:	86 bf       	out	0x36, r24	; 54
	(*(volatile port_base*)(TWCR)) &=~(1<<6);
 504:	86 b7       	in	r24, 0x36	; 54
 506:	8f 7b       	andi	r24, 0xBF	; 191
 508:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!((*(volatile port_base*)(TWCR)) & (1 << 7)));
 50a:	06 b6       	in	r0, 0x36	; 54
 50c:	07 fe       	sbrs	r0, 7
 50e:	fd cf       	rjmp	.-6      	; 0x50a <TWI_Read_With_NACK+0xa>
    // Read Data
    return (*(volatile port_base*)(TWDR));
 510:	83 b1       	in	r24, 0x03	; 3
}
 512:	08 95       	ret

00000514 <__divmodsi4>:
 514:	05 2e       	mov	r0, r21
 516:	97 fb       	bst	r25, 7
 518:	1e f4       	brtc	.+6      	; 0x520 <__divmodsi4+0xc>
 51a:	00 94       	com	r0
 51c:	0e 94 a1 02 	call	0x542	; 0x542 <__negsi2>
 520:	57 fd       	sbrc	r21, 7
 522:	07 d0       	rcall	.+14     	; 0x532 <__divmodsi4_neg2>
 524:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 528:	07 fc       	sbrc	r0, 7
 52a:	03 d0       	rcall	.+6      	; 0x532 <__divmodsi4_neg2>
 52c:	4e f4       	brtc	.+18     	; 0x540 <__divmodsi4_exit>
 52e:	0c 94 a1 02 	jmp	0x542	; 0x542 <__negsi2>

00000532 <__divmodsi4_neg2>:
 532:	50 95       	com	r21
 534:	40 95       	com	r20
 536:	30 95       	com	r19
 538:	21 95       	neg	r18
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
 53c:	4f 4f       	sbci	r20, 0xFF	; 255
 53e:	5f 4f       	sbci	r21, 0xFF	; 255

00000540 <__divmodsi4_exit>:
 540:	08 95       	ret

00000542 <__negsi2>:
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	08 95       	ret

00000552 <__umulhisi3>:
 552:	a2 9f       	mul	r26, r18
 554:	b0 01       	movw	r22, r0
 556:	b3 9f       	mul	r27, r19
 558:	c0 01       	movw	r24, r0
 55a:	a3 9f       	mul	r26, r19
 55c:	70 0d       	add	r23, r0
 55e:	81 1d       	adc	r24, r1
 560:	11 24       	eor	r1, r1
 562:	91 1d       	adc	r25, r1
 564:	b2 9f       	mul	r27, r18
 566:	70 0d       	add	r23, r0
 568:	81 1d       	adc	r24, r1
 56a:	11 24       	eor	r1, r1
 56c:	91 1d       	adc	r25, r1
 56e:	08 95       	ret

00000570 <__udivmodsi4>:
 570:	a1 e2       	ldi	r26, 0x21	; 33
 572:	1a 2e       	mov	r1, r26
 574:	aa 1b       	sub	r26, r26
 576:	bb 1b       	sub	r27, r27
 578:	fd 01       	movw	r30, r26
 57a:	0d c0       	rjmp	.+26     	; 0x596 <__udivmodsi4_ep>

0000057c <__udivmodsi4_loop>:
 57c:	aa 1f       	adc	r26, r26
 57e:	bb 1f       	adc	r27, r27
 580:	ee 1f       	adc	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	a2 17       	cp	r26, r18
 586:	b3 07       	cpc	r27, r19
 588:	e4 07       	cpc	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	20 f0       	brcs	.+8      	; 0x596 <__udivmodsi4_ep>
 58e:	a2 1b       	sub	r26, r18
 590:	b3 0b       	sbc	r27, r19
 592:	e4 0b       	sbc	r30, r20
 594:	f5 0b       	sbc	r31, r21

00000596 <__udivmodsi4_ep>:
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a 94       	dec	r1
 5a0:	69 f7       	brne	.-38     	; 0x57c <__udivmodsi4_loop>
 5a2:	60 95       	com	r22
 5a4:	70 95       	com	r23
 5a6:	80 95       	com	r24
 5a8:	90 95       	com	r25
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
 5ae:	bd 01       	movw	r22, r26
 5b0:	cf 01       	movw	r24, r30
 5b2:	08 95       	ret

000005b4 <__itoa_ncheck>:
 5b4:	bb 27       	eor	r27, r27
 5b6:	4a 30       	cpi	r20, 0x0A	; 10
 5b8:	31 f4       	brne	.+12     	; 0x5c6 <__itoa_ncheck+0x12>
 5ba:	99 23       	and	r25, r25
 5bc:	22 f4       	brpl	.+8      	; 0x5c6 <__itoa_ncheck+0x12>
 5be:	bd e2       	ldi	r27, 0x2D	; 45
 5c0:	90 95       	com	r25
 5c2:	81 95       	neg	r24
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__utoa_common>

000005ca <__utoa_ncheck>:
 5ca:	bb 27       	eor	r27, r27

000005cc <__utoa_common>:
 5cc:	fb 01       	movw	r30, r22
 5ce:	55 27       	eor	r21, r21
 5d0:	aa 27       	eor	r26, r26
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	aa 1f       	adc	r26, r26
 5d8:	a4 17       	cp	r26, r20
 5da:	10 f0       	brcs	.+4      	; 0x5e0 <__utoa_common+0x14>
 5dc:	a4 1b       	sub	r26, r20
 5de:	83 95       	inc	r24
 5e0:	50 51       	subi	r21, 0x10	; 16
 5e2:	b9 f7       	brne	.-18     	; 0x5d2 <__utoa_common+0x6>
 5e4:	a0 5d       	subi	r26, 0xD0	; 208
 5e6:	aa 33       	cpi	r26, 0x3A	; 58
 5e8:	08 f0       	brcs	.+2      	; 0x5ec <__utoa_common+0x20>
 5ea:	a9 5d       	subi	r26, 0xD9	; 217
 5ec:	a1 93       	st	Z+, r26
 5ee:	00 97       	sbiw	r24, 0x00	; 0
 5f0:	79 f7       	brne	.-34     	; 0x5d0 <__utoa_common+0x4>
 5f2:	b1 11       	cpse	r27, r1
 5f4:	b1 93       	st	Z+, r27
 5f6:	11 92       	st	Z+, r1
 5f8:	cb 01       	movw	r24, r22
 5fa:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <strrev>

000005fe <strrev>:
 5fe:	dc 01       	movw	r26, r24
 600:	fc 01       	movw	r30, r24
 602:	67 2f       	mov	r22, r23
 604:	71 91       	ld	r23, Z+
 606:	77 23       	and	r23, r23
 608:	e1 f7       	brne	.-8      	; 0x602 <strrev+0x4>
 60a:	32 97       	sbiw	r30, 0x02	; 2
 60c:	04 c0       	rjmp	.+8      	; 0x616 <strrev+0x18>
 60e:	7c 91       	ld	r23, X
 610:	6d 93       	st	X+, r22
 612:	70 83       	st	Z, r23
 614:	62 91       	ld	r22, -Z
 616:	ae 17       	cp	r26, r30
 618:	bf 07       	cpc	r27, r31
 61a:	c8 f3       	brcs	.-14     	; 0x60e <strrev+0x10>
 61c:	08 95       	ret

0000061e <_exit>:
 61e:	f8 94       	cli

00000620 <__stop_program>:
 620:	ff cf       	rjmp	.-2      	; 0x620 <__stop_program>
