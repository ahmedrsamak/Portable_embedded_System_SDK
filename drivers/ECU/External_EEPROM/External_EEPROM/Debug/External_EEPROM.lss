
External_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000052c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000052c  000005c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800068  00800068  000005c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152a  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a47  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000885  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f6  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084b  00000000  00000000  000036fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003f45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  8a:	0c 94 94 02 	jmp	0x528	; 0x528 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin_dir>:
	{
		(*(volatile port_base*)(port))=0xFF;
	}
	else
	{
		(*(volatile port_base*)(port))=0x00;
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	69 f4       	brne	.+26     	; 0xb0 <dio_set_pin_dir+0x1e>
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	22 91       	ld	r18, -Z
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <dio_set_pin_dir+0x14>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <dio_set_pin_dir+0x10>
  aa:	82 2b       	or	r24, r18
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	22 91       	ld	r18, -Z
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_set_pin_dir+0x2e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_set_pin_dir+0x2a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <dio_write_pin>:
	}
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	20 81       	ld	r18, Z
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <dio_write_pin+0x14>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <dio_write_pin+0x10>
  e4:	82 2b       	or	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	20 81       	ld	r18, Z
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_write_pin+0x2e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_write_pin+0x2a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <send_4bit_data>:
 *  Author: ahmed
 */ 
#include "hal_lcd.h"

static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	eb 01       	movw	r28, r22
   static short int i;
 for (i=0;i<bit_mode;i++)
 114:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 118:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 120:	08 2f       	mov	r16, r24
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	78 01       	movw	r14, r16
 126:	c9 01       	movw	r24, r18
 128:	04 96       	adiw	r24, 0x04	; 4
 12a:	a8 01       	movw	r20, r16
 12c:	02 c0       	rjmp	.+4      	; 0x132 <send_4bit_data+0x2c>
 12e:	55 95       	asr	r21
 130:	47 95       	ror	r20
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <send_4bit_data+0x28>
 136:	41 70       	andi	r20, 0x01	; 1
 138:	fe 01       	movw	r30, r28
 13a:	e2 0f       	add	r30, r18
 13c:	f3 1f       	adc	r31, r19
 13e:	62 81       	ldd	r22, Z+2	; 0x02
 140:	88 81       	ld	r24, Y
 142:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
#include "hal_lcd.h"

static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
   static short int i;
 for (i=0;i<bit_mode;i++)
 146:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
 14a:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <__data_end+0x1>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <__data_end+0x1>
 156:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
 15a:	24 30       	cpi	r18, 0x04	; 4
 15c:	31 05       	cpc	r19, r1
 15e:	14 f3       	brlt	.-60     	; 0x124 <send_4bit_data+0x1e>
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 }
 
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);	
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	6f 81       	ldd	r22, Y+7	; 0x07
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <send_4bit_data+0x66>
 170:	00 c0       	rjmp	.+0      	; 0x172 <send_4bit_data+0x6c>
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	6f 81       	ldd	r22, Y+7	; 0x07
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 17c:	87 ec       	ldi	r24, 0xC7	; 199
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <send_4bit_data+0x7a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <send_4bit_data+0x80>
 186:	00 00       	nop
 _delay_us(100);
 
 for (i=0;i<bit_mode;i++)
 188:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 18c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 194:	a7 01       	movw	r20, r14
 196:	08 2e       	mov	r0, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <send_4bit_data+0x98>
 19a:	55 95       	asr	r21
 19c:	47 95       	ror	r20
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <send_4bit_data+0x94>
 1a2:	41 70       	andi	r20, 0x01	; 1
 1a4:	fe 01       	movw	r30, r28
 1a6:	e8 0f       	add	r30, r24
 1a8:	f9 1f       	adc	r31, r25
 1aa:	62 81       	ldd	r22, Z+2	; 0x02
 1ac:	88 81       	ld	r24, Y
 1ae:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);	
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 _delay_us(100);
 
 for (i=0;i<bit_mode;i++)
 1b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 1c0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	91 05       	cpc	r25, r1
 1c8:	2c f3       	brlt	.-54     	; 0x194 <send_4bit_data+0x8e>
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 }
 
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	6f 81       	ldd	r22, Y+7	; 0x07
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 1d4:	92 e0       	ldi	r25, 0x02	; 2
 1d6:	9a 95       	dec	r25
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <send_4bit_data+0xd0>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <send_4bit_data+0xd6>
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	6f 81       	ldd	r22, Y+7	; 0x07
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	8f ec       	ldi	r24, 0xCF	; 207
 1e8:	97 e0       	ldi	r25, 0x07	; 7
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <send_4bit_data+0xe4>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <send_4bit_data+0xea>
 1f0:	00 00       	nop
 _delay_ms(1);
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <lcd_init>:

void lcd_init(config_lcd_pin * obj)
{
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	6e 81       	ldd	r22, Y+6	; 0x06
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	6f 81       	ldd	r22, Y+7	; 0x07
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
 222:	8e 01       	movw	r16, r28
 224:	0e 5f       	subi	r16, 0xFE	; 254
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	7e 01       	movw	r14, r28
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	e8 0e       	add	r14, r24
 22e:	f1 1c       	adc	r15, r1
	for (i=0;i<bit_mode;i++)
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
 230:	f8 01       	movw	r30, r16
 232:	61 91       	ld	r22, Z+
 234:	8f 01       	movw	r16, r30
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	88 81       	ld	r24, Y
 23a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
void lcd_init(config_lcd_pin * obj)
{
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
	for (i=0;i<bit_mode;i++)
 23e:	0e 15       	cp	r16, r14
 240:	1f 05       	cpc	r17, r15
 242:	b1 f7       	brne	.-20     	; 0x230 <lcd_init+0x30>
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
	}
dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	6e 81       	ldd	r22, Y+6	; 0x06
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
send_4bit_data(0x33,obj);
 24e:	be 01       	movw	r22, r28
 250:	83 e3       	ldi	r24, 0x33	; 51
 252:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x32,obj);
 256:	be 01       	movw	r22, r28
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x28,obj);
 25e:	be 01       	movw	r22, r28
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x0E,obj);
 266:	be 01       	movw	r22, r28
 268:	8e e0       	ldi	r24, 0x0E	; 14
 26a:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x01,obj);
 26e:	be 01       	movw	r22, r28
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
 276:	8f e9       	ldi	r24, 0x9F	; 159
 278:	9f e0       	ldi	r25, 0x0F	; 15
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x7a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_init+0x80>
 280:	00 00       	nop
_delay_ms(2);
send_4bit_data(0x06,obj);
 282:	be 01       	movw	r22, r28
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <lcd_out>:
void lcd_out(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	8c 01       	movw	r16, r24
 2a6:	f6 2e       	mov	r15, r22
 2a8:	e4 2e       	mov	r14, r20
 2aa:	e9 01       	movw	r28, r18
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	66 81       	ldd	r22, Z+6	; 0x06
 2b2:	81 81       	ldd	r24, Z+1	; 0x01
 2b4:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(addr[y-1] + x-1,obj);
 2b8:	ef 2d       	mov	r30, r15
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e1 5a       	subi	r30, 0xA1	; 161
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	ea 94       	dec	r14
 2c2:	80 81       	ld	r24, Z
 2c4:	b8 01       	movw	r22, r16
 2c6:	8e 0d       	add	r24, r14
 2c8:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	f8 01       	movw	r30, r16
 2d0:	66 81       	ldd	r22, Z+6	; 0x06
 2d2:	81 81       	ldd	r24, Z+1	; 0x01
 2d4:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	while(*string>0)
 2d8:	88 81       	ld	r24, Y
 2da:	88 23       	and	r24, r24
 2dc:	39 f0       	breq	.+14     	; 0x2ec <lcd_out+0x54>
 2de:	21 96       	adiw	r28, 0x01	; 1
	{
	 send_4bit_data(*string++,obj);
 2e0:	b8 01       	movw	r22, r16
 2e2:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
	send_4bit_data(addr[y-1] + x-1,obj);
	
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	while(*string>0)
 2e6:	89 91       	ld	r24, Y+
 2e8:	81 11       	cpse	r24, r1
 2ea:	fa cf       	rjmp	.-12     	; 0x2e0 <lcd_out+0x48>
	{
	 send_4bit_data(*string++,obj);
	}	
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	08 95       	ret

000002fa <lcd_cmd>:
void lcd_cmd(config_lcd_pin * obj,enum_cmd cmd)
{
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
 302:	16 2f       	mov	r17, r22
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	6e 81       	ldd	r22, Y+6	; 0x06
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(cmd,obj);
 30e:	be 01       	movw	r22, r28
 310:	81 2f       	mov	r24, r17
 312:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	08 95       	ret

0000031e <main>:
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 31e:	4a e0       	ldi	r20, 0x0A	; 10
 320:	62 e7       	ldi	r22, 0x72	; 114
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 5f 02 	call	0x4be	; 0x4be <__itoa_ncheck>
int main(void)
{
	itoa(16,_data,10);
	//char _data;
	//_data=int_to_str(15,2);
	LCD1.ctrl_port=PORTB;
 32c:	ea e6       	ldi	r30, 0x6A	; 106
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	88 e3       	ldi	r24, 0x38	; 56
 332:	81 83       	std	Z+1, r24	; 0x01
	LCD1.data_port=PORTB;
 334:	80 83       	st	Z, r24
	LCD1.RS_pin=2;
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	86 83       	std	Z+6, r24	; 0x06
	LCD1.E_pin=3;
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	87 83       	std	Z+7, r24	; 0x07
	LCD1.data_pin[0]=4;
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	82 83       	std	Z+2, r24	; 0x02
	LCD1.data_pin[1]=5;
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	83 83       	std	Z+3, r24	; 0x03
	LCD1.data_pin[2]=6;
 346:	86 e0       	ldi	r24, 0x06	; 6
 348:	84 83       	std	Z+4, r24	; 0x04
	LCD1.data_pin[3]=7;
 34a:	87 e0       	ldi	r24, 0x07	; 7
 34c:	85 83       	std	Z+5, r24	; 0x05
	
   lcd_init(&LCD1);
 34e:	cf 01       	movw	r24, r30
 350:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
   TWI_Init(100,0x01);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	84 e6       	ldi	r24, 0x64	; 100
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 06 02 	call	0x40c	; 0x40c <TWI_Init>
   lcd_cmd(&LCD1,LCD_ON_CURSOR_OFF);
 35e:	6c e0       	ldi	r22, 0x0C	; 12
 360:	8a e6       	ldi	r24, 0x6A	; 106
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_cmd>
   lcd_out(&LCD1,1,1,"Start");
 368:	22 e6       	ldi	r18, 0x62	; 98
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	8a e6       	ldi	r24, 0x6A	; 106
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_out>
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	80 e7       	ldi	r24, 0x70	; 112
 37c:	92 e0       	ldi	r25, 0x02	; 2
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0x60>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x6a>
 388:	00 00       	nop
   _delay_ms(100);
   lcd_out(&LCD1,2,1,_data);
 38a:	22 e7       	ldi	r18, 0x72	; 114
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	62 e0       	ldi	r22, 0x02	; 2
 392:	8a e6       	ldi	r24, 0x6A	; 106
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_out>
   TWI_Start();
 39a:	0e 94 1e 02 	call	0x43c	; 0x43c <TWI_Start>
   TWI_Write(0b10100000);
 39e:	80 ea       	ldi	r24, 0xA0	; 160
 3a0:	0e 94 27 02 	call	0x44e	; 0x44e <TWI_Write>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	84 e3       	ldi	r24, 0x34	; 52
 3a8:	9c e0       	ldi	r25, 0x0C	; 12
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x8c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x96>
 3b4:	00 00       	nop
   _delay_ms(500);
   TWI_Write(0xFF);
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	0e 94 27 02 	call	0x44e	; 0x44e <TWI_Write>
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	84 e3       	ldi	r24, 0x34	; 52
 3c0:	9c e0       	ldi	r25, 0x0C	; 12
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0xa4>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0xae>
 3cc:	00 00       	nop
   _delay_ms(500);
   TWI_Write(0xFE);
 3ce:	8e ef       	ldi	r24, 0xFE	; 254
 3d0:	0e 94 27 02 	call	0x44e	; 0x44e <TWI_Write>
 3d4:	2f ef       	ldi	r18, 0xFF	; 255
 3d6:	84 e3       	ldi	r24, 0x34	; 52
 3d8:	9c e0       	ldi	r25, 0x0C	; 12
 3da:	21 50       	subi	r18, 0x01	; 1
 3dc:	80 40       	sbci	r24, 0x00	; 0
 3de:	90 40       	sbci	r25, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0xbc>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0xc6>
 3e4:	00 00       	nop
   _delay_ms(500);
   TWI_Stop();
 3e6:	0e 94 24 02 	call	0x448	; 0x448 <TWI_Stop>
 3ea:	2f ef       	ldi	r18, 0xFF	; 255
 3ec:	89 e6       	ldi	r24, 0x69	; 105
 3ee:	98 e1       	ldi	r25, 0x18	; 24
 3f0:	21 50       	subi	r18, 0x01	; 1
 3f2:	80 40       	sbci	r24, 0x00	; 0
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0xd2>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0xdc>
 3fa:	00 00       	nop
   _delay_ms(1000);
   TWI_Start();
 3fc:	0e 94 1e 02 	call	0x43c	; 0x43c <TWI_Start>
   TWI_Write(0b10100001);
 400:	81 ea       	ldi	r24, 0xA1	; 161
 402:	0e 94 27 02 	call	0x44e	; 0x44e <TWI_Write>
  // data=TWI_Read_With_NACK();
   TWI_Stop();
 406:	0e 94 24 02 	call	0x448	; 0x448 <TWI_Stop>
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

0000040c <TWI_Init>:
 *  Author: Eng/Hossam Adel
 *  Modified by Ahmed Samak
 */ 
#include "../TWI/hal_twi.h"
void TWI_Init(u16 freq,u8 slave_addr)
{
 40c:	cf 93       	push	r28
 40e:	c6 2f       	mov	r28, r22
    // freq -> Enter freq with KHz for example 400 is 400KHz
    (*(volatile port_base*)(TWBR))=(F_CPU/(2000L*freq)-8);
 410:	9c 01       	movw	r18, r24
 412:	a0 ed       	ldi	r26, 0xD0	; 208
 414:	b7 e0       	ldi	r27, 0x07	; 7
 416:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__umulhisi3>
 41a:	9b 01       	movw	r18, r22
 41c:	ac 01       	movw	r20, r24
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	72 e1       	ldi	r23, 0x12	; 18
 422:	8a e7       	ldi	r24, 0x7A	; 122
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 2e 02 	call	0x45c	; 0x45c <__udivmodsi4>
 42a:	28 50       	subi	r18, 0x08	; 8
 42c:	20 b9       	out	0x00, r18	; 0
	(*(volatile port_base*)(TWSR))=0x00;
 42e:	11 b8       	out	0x01, r1	; 1
    // Two Wire Bus address my address if any master device want to call me: use addr (used in case this MC is a slave device)
    // General Call Recognition: Off
    (*(volatile port_base*)(TWAR))=slave_addr<<1; // my address masking with first bit 	
 430:	cc 0f       	add	r28, r28
 432:	c2 b9       	out	0x02, r28	; 2
    (*(volatile port_base*)(TWCR))=(1<<2); //enable TWI
 434:	84 e0       	ldi	r24, 0x04	; 4
 436:	86 bf       	out	0x36, r24	; 54
}
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <TWI_Start>:
{
    /* Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 5) | (1 << 2);
 43c:	84 ea       	ldi	r24, 0xA4	; 164
 43e:	86 bf       	out	0x36, r24	; 54
    
    // Wait for TWINT flag set in TWCR Register (start bit is send successfully) 
    while (!((*(volatile port_base*)(TWCR)) & (1 << 7)));
 440:	06 b6       	in	r0, 0x36	; 54
 442:	07 fe       	sbrs	r0, 7
 444:	fd cf       	rjmp	.-6      	; 0x440 <TWI_Start+0x4>
}
 446:	08 95       	ret

00000448 <TWI_Stop>:
{
    /* Clear the TWINT flag before sending the stop bit TWINT=1
	 * Enable TWI Module TWEN=1 
	 * send the stop bit by TWSTO=1
	 */
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 2) | (1 << 4);
 448:	84 e9       	ldi	r24, 0x94	; 148
 44a:	86 bf       	out	0x36, r24	; 54
 44c:	08 95       	ret

0000044e <TWI_Write>:
}

void TWI_Write(u8 data)
{
    // Put data On TWI Register
    (*(volatile port_base*)(TWDR)) = data;
 44e:	83 b9       	out	0x03, r24	; 3
    /* Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 2);
 450:	84 e8       	ldi	r24, 0x84	; 132
 452:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register(data is send successfully) 
    while (!((*(volatile port_base*)(TWCR)) & (1 << 7)));
 454:	06 b6       	in	r0, 0x36	; 54
 456:	07 fe       	sbrs	r0, 7
 458:	fd cf       	rjmp	.-6      	; 0x454 <TWI_Write+0x6>
}
 45a:	08 95       	ret

0000045c <__udivmodsi4>:
 45c:	a1 e2       	ldi	r26, 0x21	; 33
 45e:	1a 2e       	mov	r1, r26
 460:	aa 1b       	sub	r26, r26
 462:	bb 1b       	sub	r27, r27
 464:	fd 01       	movw	r30, r26
 466:	0d c0       	rjmp	.+26     	; 0x482 <__udivmodsi4_ep>

00000468 <__udivmodsi4_loop>:
 468:	aa 1f       	adc	r26, r26
 46a:	bb 1f       	adc	r27, r27
 46c:	ee 1f       	adc	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	a2 17       	cp	r26, r18
 472:	b3 07       	cpc	r27, r19
 474:	e4 07       	cpc	r30, r20
 476:	f5 07       	cpc	r31, r21
 478:	20 f0       	brcs	.+8      	; 0x482 <__udivmodsi4_ep>
 47a:	a2 1b       	sub	r26, r18
 47c:	b3 0b       	sbc	r27, r19
 47e:	e4 0b       	sbc	r30, r20
 480:	f5 0b       	sbc	r31, r21

00000482 <__udivmodsi4_ep>:
 482:	66 1f       	adc	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	1a 94       	dec	r1
 48c:	69 f7       	brne	.-38     	; 0x468 <__udivmodsi4_loop>
 48e:	60 95       	com	r22
 490:	70 95       	com	r23
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	9b 01       	movw	r18, r22
 498:	ac 01       	movw	r20, r24
 49a:	bd 01       	movw	r22, r26
 49c:	cf 01       	movw	r24, r30
 49e:	08 95       	ret

000004a0 <__umulhisi3>:
 4a0:	a2 9f       	mul	r26, r18
 4a2:	b0 01       	movw	r22, r0
 4a4:	b3 9f       	mul	r27, r19
 4a6:	c0 01       	movw	r24, r0
 4a8:	a3 9f       	mul	r26, r19
 4aa:	70 0d       	add	r23, r0
 4ac:	81 1d       	adc	r24, r1
 4ae:	11 24       	eor	r1, r1
 4b0:	91 1d       	adc	r25, r1
 4b2:	b2 9f       	mul	r27, r18
 4b4:	70 0d       	add	r23, r0
 4b6:	81 1d       	adc	r24, r1
 4b8:	11 24       	eor	r1, r1
 4ba:	91 1d       	adc	r25, r1
 4bc:	08 95       	ret

000004be <__itoa_ncheck>:
 4be:	bb 27       	eor	r27, r27
 4c0:	4a 30       	cpi	r20, 0x0A	; 10
 4c2:	31 f4       	brne	.+12     	; 0x4d0 <__itoa_ncheck+0x12>
 4c4:	99 23       	and	r25, r25
 4c6:	22 f4       	brpl	.+8      	; 0x4d0 <__itoa_ncheck+0x12>
 4c8:	bd e2       	ldi	r27, 0x2D	; 45
 4ca:	90 95       	com	r25
 4cc:	81 95       	neg	r24
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__utoa_common>

000004d4 <__utoa_ncheck>:
 4d4:	bb 27       	eor	r27, r27

000004d6 <__utoa_common>:
 4d6:	fb 01       	movw	r30, r22
 4d8:	55 27       	eor	r21, r21
 4da:	aa 27       	eor	r26, r26
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	aa 1f       	adc	r26, r26
 4e2:	a4 17       	cp	r26, r20
 4e4:	10 f0       	brcs	.+4      	; 0x4ea <__utoa_common+0x14>
 4e6:	a4 1b       	sub	r26, r20
 4e8:	83 95       	inc	r24
 4ea:	50 51       	subi	r21, 0x10	; 16
 4ec:	b9 f7       	brne	.-18     	; 0x4dc <__utoa_common+0x6>
 4ee:	a0 5d       	subi	r26, 0xD0	; 208
 4f0:	aa 33       	cpi	r26, 0x3A	; 58
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <__utoa_common+0x20>
 4f4:	a9 5d       	subi	r26, 0xD9	; 217
 4f6:	a1 93       	st	Z+, r26
 4f8:	00 97       	sbiw	r24, 0x00	; 0
 4fa:	79 f7       	brne	.-34     	; 0x4da <__utoa_common+0x4>
 4fc:	b1 11       	cpse	r27, r1
 4fe:	b1 93       	st	Z+, r27
 500:	11 92       	st	Z+, r1
 502:	cb 01       	movw	r24, r22
 504:	0c 94 84 02 	jmp	0x508	; 0x508 <strrev>

00000508 <strrev>:
 508:	dc 01       	movw	r26, r24
 50a:	fc 01       	movw	r30, r24
 50c:	67 2f       	mov	r22, r23
 50e:	71 91       	ld	r23, Z+
 510:	77 23       	and	r23, r23
 512:	e1 f7       	brne	.-8      	; 0x50c <strrev+0x4>
 514:	32 97       	sbiw	r30, 0x02	; 2
 516:	04 c0       	rjmp	.+8      	; 0x520 <strrev+0x18>
 518:	7c 91       	ld	r23, X
 51a:	6d 93       	st	X+, r22
 51c:	70 83       	st	Z, r23
 51e:	62 91       	ld	r22, -Z
 520:	ae 17       	cp	r26, r30
 522:	bf 07       	cpc	r27, r31
 524:	c8 f3       	brcs	.-14     	; 0x518 <strrev+0x10>
 526:	08 95       	ret

00000528 <_exit>:
 528:	f8 94       	cli

0000052a <__stop_program>:
 52a:	ff cf       	rjmp	.-2      	; 0x52a <__stop_program>
