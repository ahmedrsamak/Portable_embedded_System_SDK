
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ac  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <dio_set_port_dir>:
		(*(volatile port_base*)(port-1))&=~(1<<pin);
	}
}
void dio_write_port(port_base port,state mode)
{
	(*(volatile port_base*)(port))=mode;
  6c:	e8 2f       	mov	r30, r24
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	31 97       	sbiw	r30, 0x01	; 1
  72:	60 83       	st	Z, r22
  74:	08 95       	ret

00000076 <dio_write_pin>:
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
  76:	4f 3f       	cpi	r20, 0xFF	; 255
  78:	69 f4       	brne	.+26     	; 0x94 <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
  7a:	e8 2f       	mov	r30, r24
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	20 81       	ld	r18, Z
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	02 c0       	rjmp	.+4      	; 0x8a <dio_write_pin+0x14>
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	6a 95       	dec	r22
  8c:	e2 f7       	brpl	.-8      	; 0x86 <dio_write_pin+0x10>
  8e:	82 2b       	or	r24, r18
  90:	80 83       	st	Z, r24
  92:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
  94:	e8 2f       	mov	r30, r24
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	20 81       	ld	r18, Z
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <dio_write_pin+0x2e>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <dio_write_pin+0x2a>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <main>:
 * Author : ahmed
 */ 
#include "hal_lcd.h"
int main(void)
{
   dio_set_port_dir(PORTA,OUTPUT);
  b0:	6f ef       	ldi	r22, 0xFF	; 255
  b2:	8b e3       	ldi	r24, 0x3B	; 59
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <dio_set_port_dir>
   dio_write_pin(PORTA,5,HIGH);
  b8:	4f ef       	ldi	r20, 0xFF	; 255
  ba:	65 e0       	ldi	r22, 0x05	; 5
  bc:	8b e3       	ldi	r24, 0x3B	; 59
  be:	0e 94 3b 00 	call	0x76	; 0x76 <dio_write_pin>
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x12>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
