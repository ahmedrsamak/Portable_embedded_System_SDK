
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000003b6  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800074  00800074  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e1  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000859  00000000  00000000  00001655  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c0  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054e  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074c  00000000  00000000  00002b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 01 	call	0x358	; 0x358 <main>
  8a:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin_dir>:
	{
		(*(volatile port_base*)(port))=0xFF;
	}
	else
	{
		(*(volatile port_base*)(port))=0x00;
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	69 f4       	brne	.+26     	; 0xb0 <dio_set_pin_dir+0x1e>
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	22 91       	ld	r18, -Z
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <dio_set_pin_dir+0x14>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <dio_set_pin_dir+0x10>
  aa:	82 2b       	or	r24, r18
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	22 91       	ld	r18, -Z
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_set_pin_dir+0x2e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_set_pin_dir+0x2a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <dio_write_pin>:
	}
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	20 81       	ld	r18, Z
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <dio_write_pin+0x14>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <dio_write_pin+0x10>
  e4:	82 2b       	or	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	20 81       	ld	r18, Z
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_write_pin+0x2e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_write_pin+0x2a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <send_4bit_data>:
 *  Author: ahmed
 */ 
#include "hal_lcd.h"

static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	eb 01       	movw	r28, r22
   static short int i;
 for (i=0;i<bit_mode;i++)
 114:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 118:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 120:	08 2f       	mov	r16, r24
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	78 01       	movw	r14, r16
 126:	c9 01       	movw	r24, r18
 128:	04 96       	adiw	r24, 0x04	; 4
 12a:	a8 01       	movw	r20, r16
 12c:	02 c0       	rjmp	.+4      	; 0x132 <send_4bit_data+0x2c>
 12e:	55 95       	asr	r21
 130:	47 95       	ror	r20
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <send_4bit_data+0x28>
 136:	41 70       	andi	r20, 0x01	; 1
 138:	fe 01       	movw	r30, r28
 13a:	e2 0f       	add	r30, r18
 13c:	f3 1f       	adc	r31, r19
 13e:	62 81       	ldd	r22, Z+2	; 0x02
 140:	88 81       	ld	r24, Y
 142:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
#include "hal_lcd.h"

static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
   static short int i;
 for (i=0;i<bit_mode;i++)
 146:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__data_end>
 14a:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__data_end+0x1>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <__data_end+0x1>
 156:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__data_end>
 15a:	24 30       	cpi	r18, 0x04	; 4
 15c:	31 05       	cpc	r19, r1
 15e:	14 f3       	brlt	.-60     	; 0x124 <send_4bit_data+0x1e>
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 }
 
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);	
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	6f 81       	ldd	r22, Y+7	; 0x07
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <send_4bit_data+0x66>
 170:	00 c0       	rjmp	.+0      	; 0x172 <send_4bit_data+0x6c>
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	6f 81       	ldd	r22, Y+7	; 0x07
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 17c:	87 ec       	ldi	r24, 0xC7	; 199
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <send_4bit_data+0x7a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <send_4bit_data+0x80>
 186:	00 00       	nop
 _delay_us(100);
 
 for (i=0;i<bit_mode;i++)
 188:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 18c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 194:	a7 01       	movw	r20, r14
 196:	08 2e       	mov	r0, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <send_4bit_data+0x98>
 19a:	55 95       	asr	r21
 19c:	47 95       	ror	r20
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <send_4bit_data+0x94>
 1a2:	41 70       	andi	r20, 0x01	; 1
 1a4:	fe 01       	movw	r30, r28
 1a6:	e8 0f       	add	r30, r24
 1a8:	f9 1f       	adc	r31, r25
 1aa:	62 81       	ldd	r22, Z+2	; 0x02
 1ac:	88 81       	ld	r24, Y
 1ae:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);	
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 _delay_us(100);
 
 for (i=0;i<bit_mode;i++)
 1b2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1b6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 1c0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	91 05       	cpc	r25, r1
 1c8:	2c f3       	brlt	.-54     	; 0x194 <send_4bit_data+0x8e>
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 }
 
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	6f 81       	ldd	r22, Y+7	; 0x07
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 1d4:	92 e0       	ldi	r25, 0x02	; 2
 1d6:	9a 95       	dec	r25
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <send_4bit_data+0xd0>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <send_4bit_data+0xd6>
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	6f 81       	ldd	r22, Y+7	; 0x07
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	8f ec       	ldi	r24, 0xCF	; 207
 1e8:	97 e0       	ldi	r25, 0x07	; 7
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <send_4bit_data+0xe4>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <send_4bit_data+0xea>
 1f0:	00 00       	nop
 _delay_ms(1);
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <lcd_init>:

void lcd_init(config_lcd_pin * obj)
{
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	6e 81       	ldd	r22, Y+6	; 0x06
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	6f 81       	ldd	r22, Y+7	; 0x07
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
 222:	8e 01       	movw	r16, r28
 224:	0e 5f       	subi	r16, 0xFE	; 254
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	7e 01       	movw	r14, r28
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	e8 0e       	add	r14, r24
 22e:	f1 1c       	adc	r15, r1
	for (i=0;i<bit_mode;i++)
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
 230:	f8 01       	movw	r30, r16
 232:	61 91       	ld	r22, Z+
 234:	8f 01       	movw	r16, r30
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	88 81       	ld	r24, Y
 23a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
void lcd_init(config_lcd_pin * obj)
{
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
	for (i=0;i<bit_mode;i++)
 23e:	0e 15       	cp	r16, r14
 240:	1f 05       	cpc	r17, r15
 242:	b1 f7       	brne	.-20     	; 0x230 <lcd_init+0x30>
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
	}
dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	6e 81       	ldd	r22, Y+6	; 0x06
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
send_4bit_data(0x33,obj);
 24e:	be 01       	movw	r22, r28
 250:	83 e3       	ldi	r24, 0x33	; 51
 252:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x32,obj);
 256:	be 01       	movw	r22, r28
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x28,obj);
 25e:	be 01       	movw	r22, r28
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x0E,obj);
 266:	be 01       	movw	r22, r28
 268:	8e e0       	ldi	r24, 0x0E	; 14
 26a:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x01,obj);
 26e:	be 01       	movw	r22, r28
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
 276:	8f e9       	ldi	r24, 0x9F	; 159
 278:	9f e0       	ldi	r25, 0x0F	; 15
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x7a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_init+0x80>
 280:	00 00       	nop
_delay_ms(2);
send_4bit_data(0x06,obj);
 282:	be 01       	movw	r22, r28
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <lcd_out_chr>:
void lcd_out_chr(config_lcd_pin * obj,u8 y,u8 x,char chr)
{
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
 2a4:	16 2f       	mov	r17, r22
 2a6:	04 2f       	mov	r16, r20
 2a8:	f2 2e       	mov	r15, r18
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	6e 81       	ldd	r22, Y+6	; 0x06
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(addr[y-1] + x-1,obj);
 2b4:	e1 2f       	mov	r30, r17
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	e1 5a       	subi	r30, 0xA1	; 161
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	01 50       	subi	r16, 0x01	; 1
 2be:	80 81       	ld	r24, Z
 2c0:	be 01       	movw	r22, r28
 2c2:	80 0f       	add	r24, r16
 2c4:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	6e 81       	ldd	r22, Y+6	; 0x06
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(chr,obj);
 2d2:	be 01       	movw	r22, r28
 2d4:	8f 2d       	mov	r24, r15
 2d6:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	84 e3       	ldi	r24, 0x34	; 52
 2de:	9c e0       	ldi	r25, 0x0C	; 12
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <lcd_out_chr+0x48>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_out_chr+0x52>
 2ea:	00 00       	nop
	_delay_ms(500);
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	08 95       	ret

000002f8 <lcd_out_str>:
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	7c 01       	movw	r14, r24
 306:	06 2f       	mov	r16, r22
 308:	e9 01       	movw	r28, r18
	while(*string>0)
 30a:	28 81       	ld	r18, Y
 30c:	22 23       	and	r18, r18
 30e:	59 f0       	breq	.+22     	; 0x326 <lcd_out_str+0x2e>
 310:	21 96       	adiw	r28, 0x01	; 1
	{
	 lcd_out_chr(obj,y,x++,*string++);
 312:	11 e0       	ldi	r17, 0x01	; 1
 314:	14 0f       	add	r17, r20
 316:	60 2f       	mov	r22, r16
 318:	c7 01       	movw	r24, r14
 31a:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_out_chr>
	send_4bit_data(chr,obj);
	_delay_ms(500);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 31e:	29 91       	ld	r18, Y+
	{
	 lcd_out_chr(obj,y,x++,*string++);
 320:	41 2f       	mov	r20, r17
	send_4bit_data(chr,obj);
	_delay_ms(500);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 322:	21 11       	cpse	r18, r1
 324:	f6 cf       	rjmp	.-20     	; 0x312 <lcd_out_str+0x1a>
	{
	 lcd_out_chr(obj,y,x++,*string++);
	}	
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <lcd_cmd>:
void lcd_cmd(config_lcd_pin * obj,enum_cmd cmd)
{
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
 33c:	16 2f       	mov	r17, r22
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	6e 81       	ldd	r22, Y+6	; 0x06
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(cmd,obj);
 348:	be 01       	movw	r22, r28
 34a:	81 2f       	mov	r24, r17
 34c:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	08 95       	ret

00000358 <main>:
 */ 
#include "hal_lcd.h"
config_lcd_pin obj;
int main(void)
{
	obj.data_pin[0]=4;
 358:	e6 e7       	ldi	r30, 0x76	; 118
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	82 83       	std	Z+2, r24	; 0x02
    obj.data_pin[1]=5;
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	83 83       	std	Z+3, r24	; 0x03
    obj.data_pin[2]=6;
 364:	96 e0       	ldi	r25, 0x06	; 6
 366:	94 83       	std	Z+4, r25	; 0x04
	obj.data_pin[3]=7;
 368:	87 e0       	ldi	r24, 0x07	; 7
 36a:	85 83       	std	Z+5, r24	; 0x05
	obj.E_pin=6;
 36c:	97 83       	std	Z+7, r25	; 0x07
	obj.RS_pin=7;
 36e:	86 83       	std	Z+6, r24	; 0x06
	obj.ctrl_port=PORTA;
 370:	8b e3       	ldi	r24, 0x3B	; 59
 372:	81 83       	std	Z+1, r24	; 0x01
	obj.data_port=PORTB;
 374:	88 e3       	ldi	r24, 0x38	; 56
 376:	80 83       	st	Z, r24
	lcd_init(&obj);
 378:	cf 01       	movw	r24, r30
 37a:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
	
	//lcd_cmd(&obj,LCD_ON_CURSOR_OFF);
	lcd_cmd(&obj,LCD_CLEAR);
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	86 e7       	ldi	r24, 0x76	; 118
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_cmd>
	lcd_out_str(&obj,1,1,"1234567891234567");
 388:	22 e6       	ldi	r18, 0x62	; 98
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	86 e7       	ldi	r24, 0x76	; 118
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_out_str>
	lcd_out_chr(&obj,2,1,'b');
 398:	22 e6       	ldi	r18, 0x62	; 98
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	86 e7       	ldi	r24, 0x76	; 118
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_out_chr>
	lcd_cmd(&obj,LCD_SHIFT_RIGHT);
 3a6:	6c e1       	ldi	r22, 0x1C	; 28
 3a8:	86 e7       	ldi	r24, 0x76	; 118
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_cmd>
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <main+0x58>

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
