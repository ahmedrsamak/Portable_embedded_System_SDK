
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         0000037e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000037e  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102f  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000859  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058b  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f7  00000000  00000000  000029d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002fcd  2**0
=======
  0 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800074  00800074  00000538  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001244  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000611  00000000  00000000  0000217a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  0000278c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a1  00000000  00000000  00002ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003786  2**0
>>>>>>> LCD
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
<<<<<<< HEAD
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
=======
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
>>>>>>> LCD
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
<<<<<<< HEAD
  78:	a8 e6       	ldi	r26, 0x68	; 104
=======
  78:	a4 e7       	ldi	r26, 0x74	; 116
>>>>>>> LCD
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
<<<<<<< HEAD
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  8a:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>
=======
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  8a:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>
>>>>>>> LCD

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin_dir>:
	{
		(*(volatile port_base*)(port))=0xFF;
	}
	else
	{
		(*(volatile port_base*)(port))=0x00;
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	69 f4       	brne	.+26     	; 0xb0 <dio_set_pin_dir+0x1e>
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	22 91       	ld	r18, -Z
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <dio_set_pin_dir+0x14>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <dio_set_pin_dir+0x10>
  aa:	82 2b       	or	r24, r18
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	22 91       	ld	r18, -Z
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_set_pin_dir+0x2e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_set_pin_dir+0x2a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <dio_write_pin>:
	}
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	20 81       	ld	r18, Z
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <dio_write_pin+0x14>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <dio_write_pin+0x10>
  e4:	82 2b       	or	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	20 81       	ld	r18, Z
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_write_pin+0x2e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_write_pin+0x2a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <send_4bit_data>:
 */ 

#include <stdlib.h>
#include "hal_lcd.h"
static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	eb 01       	movw	r28, r22
   static short int i;
 for (i=0;i<bit_mode;i++)
<<<<<<< HEAD
 114:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 118:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
=======
 114:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 118:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
>>>>>>> LCD
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 120:	08 2f       	mov	r16, r24
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	78 01       	movw	r14, r16
 126:	c9 01       	movw	r24, r18
 128:	04 96       	adiw	r24, 0x04	; 4
 12a:	a8 01       	movw	r20, r16
 12c:	02 c0       	rjmp	.+4      	; 0x132 <send_4bit_data+0x2c>
 12e:	55 95       	asr	r21
 130:	47 95       	ror	r20
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <send_4bit_data+0x28>
 136:	41 70       	andi	r20, 0x01	; 1
 138:	fe 01       	movw	r30, r28
 13a:	e2 0f       	add	r30, r18
 13c:	f3 1f       	adc	r31, r19
 13e:	62 81       	ldd	r22, Z+2	; 0x02
 140:	88 81       	ld	r24, Y
 142:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
#include <stdlib.h>
#include "hal_lcd.h"
static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
   static short int i;
 for (i=0;i<bit_mode;i++)
<<<<<<< HEAD
 146:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
 14a:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <__data_end+0x1>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <__data_end+0x1>
 156:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
=======
 146:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__data_end>
 14a:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__data_end+0x1>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <__data_end+0x1>
 156:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__data_end>
>>>>>>> LCD
 15a:	24 30       	cpi	r18, 0x04	; 4
 15c:	31 05       	cpc	r19, r1
 15e:	14 f3       	brlt	.-60     	; 0x124 <send_4bit_data+0x1e>
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 }
 
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);	
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	6f 81       	ldd	r22, Y+7	; 0x07
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <send_4bit_data+0x66>
 170:	00 c0       	rjmp	.+0      	; 0x172 <send_4bit_data+0x6c>
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	6f 81       	ldd	r22, Y+7	; 0x07
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 for (i=0;i<bit_mode;i++)
<<<<<<< HEAD
 188:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 18c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
=======
 17c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 180:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> LCD
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 188:	a7 01       	movw	r20, r14
 18a:	08 2e       	mov	r0, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <send_4bit_data+0x8c>
 18e:	55 95       	asr	r21
 190:	47 95       	ror	r20
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <send_4bit_data+0x88>
 196:	41 70       	andi	r20, 0x01	; 1
 198:	fe 01       	movw	r30, r28
 19a:	e8 0f       	add	r30, r24
 19c:	f9 1f       	adc	r31, r25
 19e:	62 81       	ldd	r22, Z+2	; 0x02
 1a0:	88 81       	ld	r24, Y
 1a2:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 }
 
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);	
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 for (i=0;i<bit_mode;i++)
<<<<<<< HEAD
 1b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 1c0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	91 05       	cpc	r25, r1
 1c8:	2c f3       	brlt	.-54     	; 0x194 <send_4bit_data+0x8e>
=======
 1a6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1aa:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 1b4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	91 05       	cpc	r25, r1
 1bc:	2c f3       	brlt	.-54     	; 0x188 <send_4bit_data+0x82>
>>>>>>> LCD
 {
	 dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 }
 
 dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	6f 81       	ldd	r22, Y+7	; 0x07
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	9a 95       	dec	r25
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <send_4bit_data+0xc4>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <send_4bit_data+0xca>
 _delay_us(1);
 dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
<<<<<<< HEAD
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	6f 81       	ldd	r22, Y+7	; 0x07
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
=======
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	6f 81       	ldd	r22, Y+7	; 0x07
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
>>>>>>> LCD
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
 1e6:	8f ec       	ldi	r24, 0xCF	; 207
 1e8:	97 e0       	ldi	r25, 0x07	; 7
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <send_4bit_data+0xe4>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <send_4bit_data+0xea>
 1f0:	00 00       	nop
=======
 1da:	8f ec       	ldi	r24, 0xCF	; 207
 1dc:	97 e0       	ldi	r25, 0x07	; 7
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <send_4bit_data+0xd8>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <send_4bit_data+0xde>
 1e4:	00 00       	nop
>>>>>>> LCD
 _delay_ms(1);
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <lcd_init>:

void lcd_init(config_lcd_pin * obj)
{
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	6e 81       	ldd	r22, Y+6	; 0x06
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	6f 81       	ldd	r22, Y+7	; 0x07
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
 216:	8e 01       	movw	r16, r28
 218:	0e 5f       	subi	r16, 0xFE	; 254
 21a:	1f 4f       	sbci	r17, 0xFF	; 255
 21c:	7e 01       	movw	r14, r28
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	e8 0e       	add	r14, r24
 222:	f1 1c       	adc	r15, r1
	for (i=0;i<bit_mode;i++)
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
 224:	f8 01       	movw	r30, r16
 226:	61 91       	ld	r22, Z+
 228:	8f 01       	movw	r16, r30
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	88 81       	ld	r24, Y
 22e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
void lcd_init(config_lcd_pin * obj)
{
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
	for (i=0;i<bit_mode;i++)
 232:	0e 15       	cp	r16, r14
 234:	1f 05       	cpc	r17, r15
 236:	b1 f7       	brne	.-20     	; 0x224 <lcd_init+0x30>
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
	}
dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	6e 81       	ldd	r22, Y+6	; 0x06
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
send_4bit_data(0x33,obj);
 242:	be 01       	movw	r22, r28
 244:	83 e3       	ldi	r24, 0x33	; 51
 246:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x32,obj);
 24a:	be 01       	movw	r22, r28
 24c:	82 e3       	ldi	r24, 0x32	; 50
 24e:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x28,obj);
 252:	be 01       	movw	r22, r28
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x0E,obj);
 25a:	be 01       	movw	r22, r28
 25c:	8e e0       	ldi	r24, 0x0E	; 14
 25e:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
send_4bit_data(0x01,obj);
<<<<<<< HEAD
 26e:	be 01       	movw	r22, r28
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
 276:	8f e9       	ldi	r24, 0x9F	; 159
 278:	9f e0       	ldi	r25, 0x0F	; 15
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x7a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_init+0x80>
 280:	00 00       	nop
_delay_ms(2);
send_4bit_data(0x06,obj);
 282:	be 01       	movw	r22, r28
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
=======
 262:	be 01       	movw	r22, r28
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
 26a:	8f e9       	ldi	r24, 0x9F	; 159
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x7a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_init+0x80>
 274:	00 00       	nop
_delay_ms(2);
send_4bit_data(0x06,obj);
 276:	be 01       	movw	r22, r28
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
>>>>>>> LCD
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	08 95       	ret

0000028c <lcd_out_chr>:
void lcd_out_chr(config_lcd_pin * obj,u8 y,u8 x,char chr)
{
<<<<<<< HEAD
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	8c 01       	movw	r16, r24
 2a6:	f6 2e       	mov	r15, r22
 2a8:	e4 2e       	mov	r14, r20
 2aa:	e9 01       	movw	r28, r18
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	66 81       	ldd	r22, Z+6	; 0x06
 2b2:	81 81       	ldd	r24, Z+1	; 0x01
 2b4:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(addr[y-1] + x-1,obj);
 2b8:	ef 2d       	mov	r30, r15
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e1 5a       	subi	r30, 0xA1	; 161
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	ea 94       	dec	r14
 2c2:	80 81       	ld	r24, Z
 2c4:	b8 01       	movw	r22, r16
 2c6:	8e 0d       	add	r24, r14
 2c8:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	f8 01       	movw	r30, r16
 2d0:	66 81       	ldd	r22, Z+6	; 0x06
 2d2:	81 81       	ldd	r24, Z+1	; 0x01
 2d4:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	while(*string>0)
 2d8:	88 81       	ld	r24, Y
 2da:	88 23       	and	r24, r24
 2dc:	39 f0       	breq	.+14     	; 0x2ec <lcd_out+0x54>
 2de:	21 96       	adiw	r28, 0x01	; 1
	{
	 send_4bit_data(*string++,obj);
 2e0:	b8 01       	movw	r22, r16
 2e2:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
	send_4bit_data(addr[y-1] + x-1,obj);
	
=======
 28c:	ff 92       	push	r15
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
 298:	16 2f       	mov	r17, r22
 29a:	04 2f       	mov	r16, r20
 29c:	f2 2e       	mov	r15, r18
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	6e 81       	ldd	r22, Y+6	; 0x06
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(addr[y-1] + x-1,obj);
 2a8:	e1 2f       	mov	r30, r17
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	e1 5a       	subi	r30, 0xA1	; 161
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	01 50       	subi	r16, 0x01	; 1
 2b2:	80 81       	ld	r24, Z
 2b4:	be 01       	movw	r22, r28
 2b6:	80 0f       	add	r24, r16
 2b8:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	6e 81       	ldd	r22, Y+6	; 0x06
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(chr,obj);
 2c6:	be 01       	movw	r22, r28
 2c8:	8f 2d       	mov	r24, r15
 2ca:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	08 95       	ret

000002da <lcd_out_str>:
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	7c 01       	movw	r14, r24
 2e8:	06 2f       	mov	r16, r22
 2ea:	e9 01       	movw	r28, r18
	while(*string>0)
 2ec:	28 81       	ld	r18, Y
 2ee:	22 23       	and	r18, r18
 2f0:	59 f0       	breq	.+22     	; 0x308 <lcd_out_str+0x2e>
 2f2:	21 96       	adiw	r28, 0x01	; 1
	{
	 lcd_out_chr(obj,y,x++,*string++);
 2f4:	11 e0       	ldi	r17, 0x01	; 1
 2f6:	14 0f       	add	r17, r20
 2f8:	60 2f       	mov	r22, r16
 2fa:	c7 01       	movw	r24, r14
 2fc:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_out_chr>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	send_4bit_data(chr,obj);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 300:	29 91       	ld	r18, Y+
	{
	 lcd_out_chr(obj,y,x++,*string++);
 302:	41 2f       	mov	r20, r17
>>>>>>> LCD
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	send_4bit_data(chr,obj);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
<<<<<<< HEAD
 2e6:	89 91       	ld	r24, Y+
 2e8:	81 11       	cpse	r24, r1
 2ea:	fa cf       	rjmp	.-12     	; 0x2e0 <lcd_out+0x48>
=======
 304:	21 11       	cpse	r18, r1
 306:	f6 cf       	rjmp	.-20     	; 0x2f4 <lcd_out_str+0x1a>
	{
	 lcd_out_chr(obj,y,x++,*string++);
	}	
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	08 95       	ret

00000316 <lcd_out_num>:
void lcd_out_num(config_lcd_pin * obj,u8 y,u8 x,s16 num)
{
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 d0       	rcall	.+0      	; 0x326 <lcd_out_num+0x10>
 326:	00 d0       	rcall	.+0      	; 0x328 <lcd_out_num+0x12>
 328:	00 d0       	rcall	.+0      	; 0x32a <lcd_out_num+0x14>
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	7c 01       	movw	r14, r24
 330:	d6 2e       	mov	r13, r22
 332:	04 2f       	mov	r16, r20
 334:	c9 01       	movw	r24, r18
	u8 ArrayIndex = 0;
	char s8DisplayStr[6] = {0};
 336:	be 01       	movw	r22, r28
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	26 e0       	ldi	r18, 0x06	; 6
 33e:	fb 01       	movw	r30, r22
 340:	11 92       	st	Z+, r1
 342:	2a 95       	dec	r18
 344:	e9 f7       	brne	.-6      	; 0x340 <lcd_out_num+0x2a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 346:	4a e0       	ldi	r20, 0x0A	; 10
 348:	0e 94 11 02 	call	0x422	; 0x422 <__itoa_ncheck>
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	22 23       	and	r18, r18
 350:	99 f0       	breq	.+38     	; 0x378 <lcd_out_num+0x62>
 352:	40 2f       	mov	r20, r16
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
 354:	11 e0       	ldi	r17, 0x01	; 1
 356:	14 0f       	add	r17, r20
 358:	6d 2d       	mov	r22, r13
 35a:	c7 01       	movw	r24, r14
 35c:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_out_chr>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 360:	81 2f       	mov	r24, r17
 362:	80 1b       	sub	r24, r16
 364:	e1 e0       	ldi	r30, 0x01	; 1
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	ec 0f       	add	r30, r28
 36a:	fd 1f       	adc	r31, r29
 36c:	e8 0f       	add	r30, r24
 36e:	f1 1d       	adc	r31, r1
 370:	20 81       	ld	r18, Z
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
 372:	41 2f       	mov	r20, r17
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 374:	21 11       	cpse	r18, r1
 376:	ee cf       	rjmp	.-36     	; 0x354 <lcd_out_num+0x3e>
>>>>>>> LCD
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
	}	
}
<<<<<<< HEAD
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	08 95       	ret

000002fa <lcd_cmd>:
void lcd_cmd(config_lcd_pin * obj,enum_cmd cmd)
{
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
 302:	16 2f       	mov	r17, r22
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	6e 81       	ldd	r22, Y+6	; 0x06
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(cmd,obj);
 30e:	be 01       	movw	r22, r28
 310:	81 2f       	mov	r24, r17
 312:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	08 95       	ret

0000031e <main>:
=======
 378:	26 96       	adiw	r28, 0x06	; 6
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	df 90       	pop	r13
 392:	08 95       	ret

00000394 <lcd_cmd>:
void lcd_cmd(config_lcd_pin * obj,enum_cmd cmd)
{
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ec 01       	movw	r28, r24
 39c:	16 2f       	mov	r17, r22
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	6e 81       	ldd	r22, Y+6	; 0x06
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(cmd,obj);
 3a8:	be 01       	movw	r22, r28
 3aa:	81 2f       	mov	r24, r17
 3ac:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	08 95       	ret

000003b8 <main>:
>>>>>>> LCD
 */ 
#include "hal_lcd.h"
config_lcd_pin obj;
int main(void)
{
	obj.data_pin[0]=4;
<<<<<<< HEAD
 31e:	ea e6       	ldi	r30, 0x6A	; 106
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	82 83       	std	Z+2, r24	; 0x02
    obj.data_pin[1]=5;
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	83 83       	std	Z+3, r24	; 0x03
    obj.data_pin[2]=6;
 32a:	96 e0       	ldi	r25, 0x06	; 6
 32c:	94 83       	std	Z+4, r25	; 0x04
	obj.data_pin[3]=7;
 32e:	87 e0       	ldi	r24, 0x07	; 7
 330:	85 83       	std	Z+5, r24	; 0x05
	obj.E_pin=6;
 332:	97 83       	std	Z+7, r25	; 0x07
	obj.RS_pin=7;
 334:	86 83       	std	Z+6, r24	; 0x06
	obj.ctrl_port=PORTA;
 336:	8b e3       	ldi	r24, 0x3B	; 59
 338:	81 83       	std	Z+1, r24	; 0x01
	obj.data_port=PORTB;
 33a:	88 e3       	ldi	r24, 0x38	; 56
 33c:	80 83       	st	Z, r24
	lcd_init(&obj);
 33e:	cf 01       	movw	r24, r30
 340:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
	
	//lcd_cmd(&obj,LCD_ON_CURSOR_OFF);
	lcd_cmd(&obj,LCD_CLEAR);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	8a e6       	ldi	r24, 0x6A	; 106
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_cmd>
	lcd_out(&obj,1,1,"samak");
 34e:	22 e6       	ldi	r18, 0x62	; 98
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	8a e6       	ldi	r24, 0x6A	; 106
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_out>
	lcd_out(&obj,2,1,"samak");
 35e:	22 e6       	ldi	r18, 0x62	; 98
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	8a e6       	ldi	r24, 0x6A	; 106
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_out>
	lcd_cmd(&obj,LCD_SHIFT_RIGHT);
 36e:	6c e1       	ldi	r22, 0x1C	; 28
 370:	8a e6       	ldi	r24, 0x6A	; 106
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_cmd>
 378:	ff cf       	rjmp	.-2      	; 0x378 <main+0x5a>

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
=======
 3b8:	e6 e7       	ldi	r30, 0x76	; 118
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	82 83       	std	Z+2, r24	; 0x02
    obj.data_pin[1]=5;
 3c0:	85 e0       	ldi	r24, 0x05	; 5
 3c2:	83 83       	std	Z+3, r24	; 0x03
    obj.data_pin[2]=6;
 3c4:	96 e0       	ldi	r25, 0x06	; 6
 3c6:	94 83       	std	Z+4, r25	; 0x04
	obj.data_pin[3]=7;
 3c8:	87 e0       	ldi	r24, 0x07	; 7
 3ca:	85 83       	std	Z+5, r24	; 0x05
	obj.E_pin=6;
 3cc:	97 83       	std	Z+7, r25	; 0x07
	obj.RS_pin=7;
 3ce:	86 83       	std	Z+6, r24	; 0x06
	obj.ctrl_port=PORTA;
 3d0:	8b e3       	ldi	r24, 0x3B	; 59
 3d2:	81 83       	std	Z+1, r24	; 0x01
	obj.data_port=PORTB;
 3d4:	88 e3       	ldi	r24, 0x38	; 56
 3d6:	80 83       	st	Z, r24
	lcd_init(&obj);
 3d8:	cf 01       	movw	r24, r30
 3da:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_init>
	
	//lcd_cmd(&obj,LCD_ON_CURSOR_OFF);
	lcd_cmd(&obj,LCD_CLEAR);
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	86 e7       	ldi	r24, 0x76	; 118
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_cmd>
	lcd_out_str(&obj,1,1,"1234567891234567");
 3e8:	22 e6       	ldi	r18, 0x62	; 98
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	86 e7       	ldi	r24, 0x76	; 118
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_out_str>
	lcd_out_chr(&obj,2,1,'b');
 3f8:	22 e6       	ldi	r18, 0x62	; 98
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	86 e7       	ldi	r24, 0x76	; 118
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_out_chr>
	lcd_out_num(&obj,2,3,-500);
 406:	2c e0       	ldi	r18, 0x0C	; 12
 408:	3e ef       	ldi	r19, 0xFE	; 254
 40a:	43 e0       	ldi	r20, 0x03	; 3
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	86 e7       	ldi	r24, 0x76	; 118
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_out_num>
	lcd_cmd(&obj,LCD_SHIFT_RIGHT);
 416:	6c e1       	ldi	r22, 0x1C	; 28
 418:	86 e7       	ldi	r24, 0x76	; 118
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_cmd>
 420:	ff cf       	rjmp	.-2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

00000422 <__itoa_ncheck>:
 422:	bb 27       	eor	r27, r27
 424:	4a 30       	cpi	r20, 0x0A	; 10
 426:	31 f4       	brne	.+12     	; 0x434 <__itoa_ncheck+0x12>
 428:	99 23       	and	r25, r25
 42a:	22 f4       	brpl	.+8      	; 0x434 <__itoa_ncheck+0x12>
 42c:	bd e2       	ldi	r27, 0x2D	; 45
 42e:	90 95       	com	r25
 430:	81 95       	neg	r24
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__utoa_common>

00000438 <__utoa_ncheck>:
 438:	bb 27       	eor	r27, r27

0000043a <__utoa_common>:
 43a:	fb 01       	movw	r30, r22
 43c:	55 27       	eor	r21, r21
 43e:	aa 27       	eor	r26, r26
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	aa 1f       	adc	r26, r26
 446:	a4 17       	cp	r26, r20
 448:	10 f0       	brcs	.+4      	; 0x44e <__utoa_common+0x14>
 44a:	a4 1b       	sub	r26, r20
 44c:	83 95       	inc	r24
 44e:	50 51       	subi	r21, 0x10	; 16
 450:	b9 f7       	brne	.-18     	; 0x440 <__utoa_common+0x6>
 452:	a0 5d       	subi	r26, 0xD0	; 208
 454:	aa 33       	cpi	r26, 0x3A	; 58
 456:	08 f0       	brcs	.+2      	; 0x45a <__utoa_common+0x20>
 458:	a9 5d       	subi	r26, 0xD9	; 217
 45a:	a1 93       	st	Z+, r26
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	79 f7       	brne	.-34     	; 0x43e <__utoa_common+0x4>
 460:	b1 11       	cpse	r27, r1
 462:	b1 93       	st	Z+, r27
 464:	11 92       	st	Z+, r1
 466:	cb 01       	movw	r24, r22
 468:	0c 94 36 02 	jmp	0x46c	; 0x46c <strrev>

0000046c <strrev>:
 46c:	dc 01       	movw	r26, r24
 46e:	fc 01       	movw	r30, r24
 470:	67 2f       	mov	r22, r23
 472:	71 91       	ld	r23, Z+
 474:	77 23       	and	r23, r23
 476:	e1 f7       	brne	.-8      	; 0x470 <strrev+0x4>
 478:	32 97       	sbiw	r30, 0x02	; 2
 47a:	04 c0       	rjmp	.+8      	; 0x484 <strrev+0x18>
 47c:	7c 91       	ld	r23, X
 47e:	6d 93       	st	X+, r22
 480:	70 83       	st	Z, r23
 482:	62 91       	ld	r22, -Z
 484:	ae 17       	cp	r26, r30
 486:	bf 07       	cpc	r27, r31
 488:	c8 f3       	brcs	.-14     	; 0x47c <strrev+0x10>
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
>>>>>>> LCD
