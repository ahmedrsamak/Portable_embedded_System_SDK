
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000686  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006c  0080006c  00000726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019cf  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b92  00000000  00000000  000022a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2a  00000000  00000000  00002e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067e  00000000  00000000  00003c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0b  00000000  00000000  00004302  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000510d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <main>
  8a:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin_dir>:
	{
		(*(volatile port_base*)(port))=0x00;
	}
	else
	{
		(*(volatile port_base*)(port))=mode;
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	69 f4       	brne	.+26     	; 0xb0 <dio_set_pin_dir+0x1e>
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	22 91       	ld	r18, -Z
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <dio_set_pin_dir+0x14>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <dio_set_pin_dir+0x10>
  aa:	82 2b       	or	r24, r18
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	22 91       	ld	r18, -Z
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_set_pin_dir+0x2e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_set_pin_dir+0x2a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <dio_write_pin>:
	}
}
void dio_write_pin(port_base port,u8 pin,state mode)
{
	if (mode==HIGH)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <dio_write_pin+0x1e>
	{
		(*(volatile port_base*)(port))|=(1<<pin);
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	20 81       	ld	r18, Z
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <dio_write_pin+0x14>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <dio_write_pin+0x10>
  e4:	82 2b       	or	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret
	}
	else
	{
		(*(volatile port_base*)(port))&=~(1<<pin);
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	20 81       	ld	r18, Z
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_write_pin+0x2e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_write_pin+0x2a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <send_4bit_data>:
 */ 

#include <stdlib.h>
#include "ecu_lcd.h"
static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	eb 01       	movw	r28, r22
	static short int i;
	for (i=0;i<bit_mode;i++)
 114:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
 118:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
 120:	08 2f       	mov	r16, r24
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	78 01       	movw	r14, r16
 126:	c9 01       	movw	r24, r18
 128:	04 96       	adiw	r24, 0x04	; 4
 12a:	a8 01       	movw	r20, r16
 12c:	02 c0       	rjmp	.+4      	; 0x132 <send_4bit_data+0x2c>
 12e:	55 95       	asr	r21
 130:	47 95       	ror	r20
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <send_4bit_data+0x28>
 136:	41 70       	andi	r20, 0x01	; 1
 138:	fe 01       	movw	r30, r28
 13a:	e2 0f       	add	r30, r18
 13c:	f3 1f       	adc	r31, r19
 13e:	62 81       	ldd	r22, Z+2	; 0x02
 140:	88 81       	ld	r24, Y
 142:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
#include <stdlib.h>
#include "ecu_lcd.h"
static void send_4bit_data(u8 data,config_lcd_pin * obj)
{
	static short int i;
	for (i=0;i<bit_mode;i++)
 146:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <__data_end>
 14a:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <__data_end+0x1>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__data_end+0x1>
 156:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__data_end>
 15a:	24 30       	cpi	r18, 0x04	; 4
 15c:	31 05       	cpc	r19, r1
 15e:	14 f3       	brlt	.-60     	; 0x124 <send_4bit_data+0x1e>
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>(i+4))&0x01);
	}
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	6f 81       	ldd	r22, Y+7	; 0x07
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <send_4bit_data+0x66>
 170:	00 c0       	rjmp	.+0      	; 0x172 <send_4bit_data+0x6c>
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	6f 81       	ldd	r22, Y+7	; 0x07
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 17c:	87 ec       	ldi	r24, 0xC7	; 199
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <send_4bit_data+0x7a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <send_4bit_data+0x80>
 186:	00 00       	nop
	_delay_us(100);
	for (i=0;i<bit_mode;i++)
 188:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
 18c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
 194:	a7 01       	movw	r20, r14
 196:	08 2e       	mov	r0, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <send_4bit_data+0x98>
 19a:	55 95       	asr	r21
 19c:	47 95       	ror	r20
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <send_4bit_data+0x94>
 1a2:	41 70       	andi	r20, 0x01	; 1
 1a4:	fe 01       	movw	r30, r28
 1a6:	e8 0f       	add	r30, r24
 1a8:	f9 1f       	adc	r31, r25
 1aa:	62 81       	ldd	r22, Z+2	; 0x02
 1ac:	88 81       	ld	r24, Y
 1ae:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
	_delay_us(100);
	for (i=0;i<bit_mode;i++)
 1b2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1b6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 1c0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	91 05       	cpc	r25, r1
 1c8:	2c f3       	brlt	.-54     	; 0x194 <send_4bit_data+0x8e>
	{
		dio_write_pin(obj->data_port,obj->data_pin[i],(data>>i)&0x01);
	}
	
	dio_write_pin(obj->ctrl_port,obj->E_pin,HIGH);
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	6f 81       	ldd	r22, Y+7	; 0x07
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
 1d4:	92 e0       	ldi	r25, 0x02	; 2
 1d6:	9a 95       	dec	r25
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <send_4bit_data+0xd0>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <send_4bit_data+0xd6>
	_delay_us(1);
	dio_write_pin(obj->ctrl_port,obj->E_pin,LOW);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	6f 81       	ldd	r22, Y+7	; 0x07
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	8f ec       	ldi	r24, 0xCF	; 207
 1e8:	97 e0       	ldi	r25, 0x07	; 7
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <send_4bit_data+0xe4>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <send_4bit_data+0xea>
 1f0:	00 00       	nop
	_delay_ms(1);
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <lcd_init>:

void lcd_init(config_lcd_pin * obj)
{
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	6e 81       	ldd	r22, Y+6	; 0x06
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	6f 81       	ldd	r22, Y+7	; 0x07
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
 222:	8e 01       	movw	r16, r28
 224:	0e 5f       	subi	r16, 0xFE	; 254
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	7e 01       	movw	r14, r28
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	e8 0e       	add	r14, r24
 22e:	f1 1c       	adc	r15, r1
	for (i=0;i<bit_mode;i++)
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
 230:	f8 01       	movw	r30, r16
 232:	61 91       	ld	r22, Z+
 234:	8f 01       	movw	r16, r30
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	88 81       	ld	r24, Y
 23a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
void lcd_init(config_lcd_pin * obj)
{
	u8 i;
	dio_set_pin_dir(obj->ctrl_port,obj->RS_pin,OUTPUT);
	dio_set_pin_dir(obj->ctrl_port,obj->E_pin,OUTPUT);
	for (i=0;i<bit_mode;i++)
 23e:	0e 15       	cp	r16, r14
 240:	1f 05       	cpc	r17, r15
 242:	b1 f7       	brne	.-20     	; 0x230 <lcd_init+0x30>
	{
		dio_set_pin_dir(obj->data_port,obj->data_pin[i],OUTPUT);
	}
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	6e 81       	ldd	r22, Y+6	; 0x06
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(0x33,obj);
 24e:	be 01       	movw	r22, r28
 250:	83 e3       	ldi	r24, 0x33	; 51
 252:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	send_4bit_data(0x32,obj);
 256:	be 01       	movw	r22, r28
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	send_4bit_data(0x28,obj);
 25e:	be 01       	movw	r22, r28
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	send_4bit_data(0x0E,obj);
 266:	be 01       	movw	r22, r28
 268:	8e e0       	ldi	r24, 0x0E	; 14
 26a:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	send_4bit_data(0x01,obj);
 26e:	be 01       	movw	r22, r28
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
 276:	8f e9       	ldi	r24, 0x9F	; 159
 278:	9f e0       	ldi	r25, 0x0F	; 15
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x7a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_init+0x80>
 280:	00 00       	nop
	_delay_ms(2);
	send_4bit_data(0x06,obj);
 282:	be 01       	movw	r22, r28
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <lcd_out_chr>:
void lcd_out_chr(config_lcd_pin * obj,u8 y,u8 x,char chr)
{
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
 2a4:	16 2f       	mov	r17, r22
 2a6:	04 2f       	mov	r16, r20
 2a8:	f2 2e       	mov	r15, r18
	static u8 addr[]={0x80,0xC0};
	dio_write_pin(obj->ctrl_port,obj->RS_pin,LOW);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	6e 81       	ldd	r22, Y+6	; 0x06
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(addr[y-1] + x-1,obj);
 2b4:	e1 2f       	mov	r30, r17
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	e1 5a       	subi	r30, 0xA1	; 161
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	01 50       	subi	r16, 0x01	; 1
 2be:	80 81       	ld	r24, Z
 2c0:	be 01       	movw	r22, r28
 2c2:	80 0f       	add	r24, r16
 2c4:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	6e 81       	ldd	r22, Y+6	; 0x06
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	0e 94 66 00 	call	0xcc	; 0xcc <dio_write_pin>
	send_4bit_data(chr,obj);
 2d2:	be 01       	movw	r22, r28
 2d4:	8f 2d       	mov	r24, r15
 2d6:	0e 94 83 00 	call	0x106	; 0x106 <send_4bit_data>
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	08 95       	ret

000002e6 <lcd_out_str>:
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	7c 01       	movw	r14, r24
 2f4:	06 2f       	mov	r16, r22
 2f6:	e9 01       	movw	r28, r18
	while(*string>0)
 2f8:	28 81       	ld	r18, Y
 2fa:	22 23       	and	r18, r18
 2fc:	59 f0       	breq	.+22     	; 0x314 <lcd_out_str+0x2e>
 2fe:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_out_chr(obj,y,x++,*string++);
 300:	11 e0       	ldi	r17, 0x01	; 1
 302:	14 0f       	add	r17, r20
 304:	60 2f       	mov	r22, r16
 306:	c7 01       	movw	r24, r14
 308:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_out_chr>
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	send_4bit_data(chr,obj);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 30c:	29 91       	ld	r18, Y+
	{
		lcd_out_chr(obj,y,x++,*string++);
 30e:	41 2f       	mov	r20, r17
	dio_write_pin(obj->ctrl_port,obj->RS_pin,HIGH);
	send_4bit_data(chr,obj);
}
void lcd_out_str(config_lcd_pin * obj,u8 y,u8 x,char * string)
{
	while(*string>0)
 310:	21 11       	cpse	r18, r1
 312:	f6 cf       	rjmp	.-20     	; 0x300 <lcd_out_str+0x1a>
	{
		lcd_out_chr(obj,y,x++,*string++);
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	08 95       	ret

00000322 <lcd_out_num>:
void lcd_out_num(config_lcd_pin * obj,u8 y,u8 x,s16 num)
{
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	00 d0       	rcall	.+0      	; 0x332 <lcd_out_num+0x10>
 332:	00 d0       	rcall	.+0      	; 0x334 <lcd_out_num+0x12>
 334:	00 d0       	rcall	.+0      	; 0x336 <lcd_out_num+0x14>
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	7c 01       	movw	r14, r24
 33c:	d6 2e       	mov	r13, r22
 33e:	04 2f       	mov	r16, r20
 340:	c9 01       	movw	r24, r18
	u8 ArrayIndex = 0;
	char s8DisplayStr[6] = {0};
 342:	be 01       	movw	r22, r28
 344:	6f 5f       	subi	r22, 0xFF	; 255
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	26 e0       	ldi	r18, 0x06	; 6
 34a:	fb 01       	movw	r30, r22
 34c:	11 92       	st	Z+, r1
 34e:	2a 95       	dec	r18
 350:	e9 f7       	brne	.-6      	; 0x34c <lcd_out_num+0x2a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 352:	4a e0       	ldi	r20, 0x0A	; 10
 354:	0e 94 0c 03 	call	0x618	; 0x618 <__itoa_ncheck>
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 358:	29 81       	ldd	r18, Y+1	; 0x01
 35a:	22 23       	and	r18, r18
 35c:	99 f0       	breq	.+38     	; 0x384 <lcd_out_num+0x62>
 35e:	40 2f       	mov	r20, r16
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
 360:	11 e0       	ldi	r17, 0x01	; 1
 362:	14 0f       	add	r17, r20
 364:	6d 2d       	mov	r22, r13
 366:	c7 01       	movw	r24, r14
 368:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_out_chr>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 36c:	81 2f       	mov	r24, r17
 36e:	80 1b       	sub	r24, r16
 370:	e1 e0       	ldi	r30, 0x01	; 1
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ec 0f       	add	r30, r28
 376:	fd 1f       	adc	r31, r29
 378:	e8 0f       	add	r30, r24
 37a:	f1 1d       	adc	r31, r1
 37c:	20 81       	ld	r18, Z
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
 37e:	41 2f       	mov	r20, r17
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(num, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
 380:	21 11       	cpse	r18, r1
 382:	ee cf       	rjmp	.-36     	; 0x360 <lcd_out_num+0x3e>
	{
		lcd_out_chr(obj,y,x++,s8DisplayStr[ArrayIndex]);
	}
}
 384:	26 96       	adiw	r28, 0x06	; 6
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	df 90       	pop	r13
 39e:	08 95       	ret

000003a0 <main>:

#include "ecu_rtc.h"
#include "LCD/ecu_lcd.h"
config_lcd_pin LCD1;
int main(void)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <main+0x6>
 3a6:	1f 92       	push	r1
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
	u8 x[3];
	LCD1.ctrl_port=PORTA;
 3ac:	ee e6       	ldi	r30, 0x6E	; 110
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	8b e3       	ldi	r24, 0x3B	; 59
 3b2:	81 83       	std	Z+1, r24	; 0x01
	LCD1.data_port=PORTB;
 3b4:	88 e3       	ldi	r24, 0x38	; 56
 3b6:	80 83       	st	Z, r24
	LCD1.RS_pin=7;
 3b8:	87 e0       	ldi	r24, 0x07	; 7
 3ba:	86 83       	std	Z+6, r24	; 0x06
	LCD1.E_pin=6;
 3bc:	96 e0       	ldi	r25, 0x06	; 6
 3be:	97 83       	std	Z+7, r25	; 0x07
	LCD1.data_pin[0]=4;
 3c0:	24 e0       	ldi	r18, 0x04	; 4
 3c2:	22 83       	std	Z+2, r18	; 0x02
	LCD1.data_pin[1]=5;
 3c4:	25 e0       	ldi	r18, 0x05	; 5
 3c6:	23 83       	std	Z+3, r18	; 0x03
	LCD1.data_pin[2]=6;
 3c8:	94 83       	std	Z+4, r25	; 0x04
	LCD1.data_pin[3]=7;
 3ca:	85 83       	std	Z+5, r24	; 0x05
	lcd_init(&LCD1);
 3cc:	cf 01       	movw	r24, r30
 3ce:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
  rtc_init();
 3d2:	0e 94 24 02 	call	0x448	; 0x448 <rtc_init>
  rtc_set_time(0x02,0xA,0x01);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	6a e0       	ldi	r22, 0x0A	; 10
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	0e 94 3a 02 	call	0x474	; 0x474 <rtc_set_time>
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	80 e7       	ldi	r24, 0x70	; 112
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x46>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x50>
 3f0:	00 00       	nop
  _delay_ms(100);
  rtc_read_time(&x[0],&x[1],&x[2]);
 3f2:	ae 01       	movw	r20, r28
 3f4:	4d 5f       	subi	r20, 0xFD	; 253
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255
 3f8:	be 01       	movw	r22, r28
 3fa:	6e 5f       	subi	r22, 0xFE	; 254
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	ce 01       	movw	r24, r28
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	0e 94 57 02 	call	0x4ae	; 0x4ae <rtc_read_time>
  lcd_out_str(&LCD1,1,1,"Time is: ");
 406:	22 e6       	ldi	r18, 0x62	; 98
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	8e e6       	ldi	r24, 0x6E	; 110
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_out_str>
  lcd_out_num(&LCD1,2,2,x[0]);
 416:	29 81       	ldd	r18, Y+1	; 0x01
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	42 e0       	ldi	r20, 0x02	; 2
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	8e e6       	ldi	r24, 0x6E	; 110
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 91 01 	call	0x322	; 0x322 <lcd_out_num>
  lcd_out_num(&LCD1,2,5,x[1]);
 426:	2a 81       	ldd	r18, Y+2	; 0x02
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	45 e0       	ldi	r20, 0x05	; 5
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	8e e6       	ldi	r24, 0x6E	; 110
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 91 01 	call	0x322	; 0x322 <lcd_out_num>
  lcd_out_num(&LCD1,2,9,x[2]);
 436:	2b 81       	ldd	r18, Y+3	; 0x03
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	49 e0       	ldi	r20, 0x09	; 9
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	8e e6       	ldi	r24, 0x6E	; 110
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 91 01 	call	0x322	; 0x322 <lcd_out_num>
 446:	ff cf       	rjmp	.-2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>

00000448 <rtc_init>:
	TWI_Write(0x04); // starting address for seconds
	TWI_Write(day);
	TWI_Write(month);
	TWI_Write(year);
	TWI_Stop();
}
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	84 e6       	ldi	r24, 0x64	; 100
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 83 02 	call	0x506	; 0x506 <TWI_Init>
 452:	0e 94 9b 02 	call	0x536	; 0x536 <TWI_Start>
 456:	80 ed       	ldi	r24, 0xD0	; 208
 458:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
 462:	0e 94 a1 02 	call	0x542	; 0x542 <TWI_Stop>
 466:	87 ec       	ldi	r24, 0xC7	; 199
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <rtc_init+0x22>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <rtc_init+0x28>
 470:	00 00       	nop
 472:	08 95       	ret

00000474 <rtc_set_time>:
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	c8 2f       	mov	r28, r24
 47c:	d6 2f       	mov	r29, r22
 47e:	14 2f       	mov	r17, r20
 480:	0e 94 9b 02 	call	0x536	; 0x536 <TWI_Start>
 484:	80 ed       	ldi	r24, 0xD0	; 208
 486:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
 490:	81 2f       	mov	r24, r17
 492:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
 496:	8d 2f       	mov	r24, r29
 498:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
 49c:	8c 2f       	mov	r24, r28
 49e:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
 4a2:	0e 94 a1 02 	call	0x542	; 0x542 <TWI_Stop>
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	08 95       	ret

000004ae <rtc_read_time>:
void rtc_read_time(u8 * hour,u8 * minute,u8 * second)
{
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	ec 01       	movw	r28, r24
 4bc:	8b 01       	movw	r16, r22
 4be:	7a 01       	movw	r14, r20
	TWI_Start();
 4c0:	0e 94 9b 02 	call	0x536	; 0x536 <TWI_Start>
	TWI_Write(0xD0);
 4c4:	80 ed       	ldi	r24, 0xD0	; 208
 4c6:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
	TWI_Write(0x00);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
	TWI_Stop();
 4d0:	0e 94 a1 02 	call	0x542	; 0x542 <TWI_Stop>
	TWI_Start();
 4d4:	0e 94 9b 02 	call	0x536	; 0x536 <TWI_Start>
	TWI_Write(0xD1);
 4d8:	81 ed       	ldi	r24, 0xD1	; 209
 4da:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_Write>
	*second=TWI_Read_With_ACK();
 4de:	0e 94 ab 02 	call	0x556	; 0x556 <TWI_Read_With_ACK>
 4e2:	f7 01       	movw	r30, r14
 4e4:	80 83       	st	Z, r24
	*minute=TWI_Read_With_ACK();
 4e6:	0e 94 ab 02 	call	0x556	; 0x556 <TWI_Read_With_ACK>
 4ea:	f8 01       	movw	r30, r16
 4ec:	80 83       	st	Z, r24
	*hour=TWI_Read_With_NACK();
 4ee:	0e 94 b2 02 	call	0x564	; 0x564 <TWI_Read_With_NACK>
 4f2:	88 83       	st	Y, r24
	TWI_Stop();
 4f4:	0e 94 a1 02 	call	0x542	; 0x542 <TWI_Stop>
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	08 95       	ret

00000506 <TWI_Init>:
 *  Author: Eng/Hossam Adel
 *  Modified by Ahmed Samak
 */ 
#include "../TWI/hal_twi.h"
void TWI_Init(u16 freq,u8 slave_addr)
{
 506:	cf 93       	push	r28
 508:	c6 2f       	mov	r28, r22
    // freq -> Enter freq with KHz for example 400 is 400KHz
    (*(volatile port_base*)(TWBR))=(F_CPU/(2000L*freq)-8);
 50a:	9c 01       	movw	r18, r24
 50c:	a0 ed       	ldi	r26, 0xD0	; 208
 50e:	b7 e0       	ldi	r27, 0x07	; 7
 510:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__umulhisi3>
 514:	9b 01       	movw	r18, r22
 516:	ac 01       	movw	r20, r24
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	72 e1       	ldi	r23, 0x12	; 18
 51c:	8a e7       	ldi	r24, 0x7A	; 122
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 bc 02 	call	0x578	; 0x578 <__divmodsi4>
 524:	28 50       	subi	r18, 0x08	; 8
 526:	20 b9       	out	0x00, r18	; 0
	(*(volatile port_base*)(TWSR))=0x00;
 528:	11 b8       	out	0x01, r1	; 1
    // Two Wire Bus address my address if any master device want to call me: use addr (used in case this MC is a slave device)
    // General Call Recognition: Off
    (*(volatile port_base*)(TWAR))=slave_addr<<1; // my address masking with first bit 	
 52a:	cc 0f       	add	r28, r28
 52c:	c2 b9       	out	0x02, r28	; 2
    (*(volatile port_base*)(TWCR))=(1<<2); //enable TWI
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	86 bf       	out	0x36, r24	; 54
}
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <TWI_Start>:
{
    /* Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 5) | (1 << 2);
 536:	84 ea       	ldi	r24, 0xA4	; 164
 538:	86 bf       	out	0x36, r24	; 54
    
    // Wait for TWINT flag set in TWCR Register (start bit is send successfully) 
    while (!((*(volatile port_base*)(TWCR)) & (1 << 7)));
 53a:	06 b6       	in	r0, 0x36	; 54
 53c:	07 fe       	sbrs	r0, 7
 53e:	fd cf       	rjmp	.-6      	; 0x53a <TWI_Start+0x4>
}
 540:	08 95       	ret

00000542 <TWI_Stop>:
{
    /* Clear the TWINT flag before sending the stop bit TWINT=1
	 * Enable TWI Module TWEN=1 
	 * send the stop bit by TWSTO=1
	 */
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 2) | (1 << 4);
 542:	84 e9       	ldi	r24, 0x94	; 148
 544:	86 bf       	out	0x36, r24	; 54
 546:	08 95       	ret

00000548 <TWI_Write>:
}

void TWI_Write(u8 data)
{
    // Put data On TWI Register
    (*(volatile port_base*)(TWDR)) = data;
 548:	83 b9       	out	0x03, r24	; 3
    /* Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 2);
 54a:	84 e8       	ldi	r24, 0x84	; 132
 54c:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register(data is send successfully) 
    while (!((*(volatile port_base*)(TWCR)) & (1 << 7)));
 54e:	06 b6       	in	r0, 0x36	; 54
 550:	07 fe       	sbrs	r0, 7
 552:	fd cf       	rjmp	.-6      	; 0x54e <TWI_Write+0x6>
}
 554:	08 95       	ret

00000556 <TWI_Read_With_ACK>:
{
	/* Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 * enable sending ACK TWEA=1
	 */ 
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 2) | (1<<6);
 556:	84 ec       	ldi	r24, 0xC4	; 196
 558:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!((*(volatile port_base*)(TWCR)) & (1 << 7)));
 55a:	06 b6       	in	r0, 0x36	; 54
 55c:	07 fe       	sbrs	r0, 7
 55e:	fd cf       	rjmp	.-6      	; 0x55a <TWI_Read_With_ACK+0x4>
    // Read Data
    return (*(volatile port_base*)(TWDR));
 560:	83 b1       	in	r24, 0x03	; 3
}
 562:	08 95       	ret

00000564 <TWI_Read_With_NACK>:
{
	/* Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 * disable sending ACK TWEA=0
	 */
    (*(volatile port_base*)(TWCR)) = (1 << 7) | (1 << 2);
 564:	84 e8       	ldi	r24, 0x84	; 132
 566:	86 bf       	out	0x36, r24	; 54
	(*(volatile port_base*)(TWCR)) &=~(1<<6);
 568:	86 b7       	in	r24, 0x36	; 54
 56a:	8f 7b       	andi	r24, 0xBF	; 191
 56c:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!((*(volatile port_base*)(TWCR)) & (1 << 7)));
 56e:	06 b6       	in	r0, 0x36	; 54
 570:	07 fe       	sbrs	r0, 7
 572:	fd cf       	rjmp	.-6      	; 0x56e <TWI_Read_With_NACK+0xa>
    // Read Data
    return (*(volatile port_base*)(TWDR));
 574:	83 b1       	in	r24, 0x03	; 3
}
 576:	08 95       	ret

00000578 <__divmodsi4>:
 578:	05 2e       	mov	r0, r21
 57a:	97 fb       	bst	r25, 7
 57c:	1e f4       	brtc	.+6      	; 0x584 <__divmodsi4+0xc>
 57e:	00 94       	com	r0
 580:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__negsi2>
 584:	57 fd       	sbrc	r21, 7
 586:	07 d0       	rcall	.+14     	; 0x596 <__divmodsi4_neg2>
 588:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__udivmodsi4>
 58c:	07 fc       	sbrc	r0, 7
 58e:	03 d0       	rcall	.+6      	; 0x596 <__divmodsi4_neg2>
 590:	4e f4       	brtc	.+18     	; 0x5a4 <__divmodsi4_exit>
 592:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__negsi2>

00000596 <__divmodsi4_neg2>:
 596:	50 95       	com	r21
 598:	40 95       	com	r20
 59a:	30 95       	com	r19
 59c:	21 95       	neg	r18
 59e:	3f 4f       	sbci	r19, 0xFF	; 255
 5a0:	4f 4f       	sbci	r20, 0xFF	; 255
 5a2:	5f 4f       	sbci	r21, 0xFF	; 255

000005a4 <__divmodsi4_exit>:
 5a4:	08 95       	ret

000005a6 <__negsi2>:
 5a6:	90 95       	com	r25
 5a8:	80 95       	com	r24
 5aa:	70 95       	com	r23
 5ac:	61 95       	neg	r22
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	08 95       	ret

000005b6 <__umulhisi3>:
 5b6:	a2 9f       	mul	r26, r18
 5b8:	b0 01       	movw	r22, r0
 5ba:	b3 9f       	mul	r27, r19
 5bc:	c0 01       	movw	r24, r0
 5be:	a3 9f       	mul	r26, r19
 5c0:	70 0d       	add	r23, r0
 5c2:	81 1d       	adc	r24, r1
 5c4:	11 24       	eor	r1, r1
 5c6:	91 1d       	adc	r25, r1
 5c8:	b2 9f       	mul	r27, r18
 5ca:	70 0d       	add	r23, r0
 5cc:	81 1d       	adc	r24, r1
 5ce:	11 24       	eor	r1, r1
 5d0:	91 1d       	adc	r25, r1
 5d2:	08 95       	ret

000005d4 <__udivmodsi4>:
 5d4:	a1 e2       	ldi	r26, 0x21	; 33
 5d6:	1a 2e       	mov	r1, r26
 5d8:	aa 1b       	sub	r26, r26
 5da:	bb 1b       	sub	r27, r27
 5dc:	fd 01       	movw	r30, r26
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <__udivmodsi4_ep>

000005e0 <__udivmodsi4_loop>:
 5e0:	aa 1f       	adc	r26, r26
 5e2:	bb 1f       	adc	r27, r27
 5e4:	ee 1f       	adc	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	a2 17       	cp	r26, r18
 5ea:	b3 07       	cpc	r27, r19
 5ec:	e4 07       	cpc	r30, r20
 5ee:	f5 07       	cpc	r31, r21
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__udivmodsi4_ep>
 5f2:	a2 1b       	sub	r26, r18
 5f4:	b3 0b       	sbc	r27, r19
 5f6:	e4 0b       	sbc	r30, r20
 5f8:	f5 0b       	sbc	r31, r21

000005fa <__udivmodsi4_ep>:
 5fa:	66 1f       	adc	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	1a 94       	dec	r1
 604:	69 f7       	brne	.-38     	; 0x5e0 <__udivmodsi4_loop>
 606:	60 95       	com	r22
 608:	70 95       	com	r23
 60a:	80 95       	com	r24
 60c:	90 95       	com	r25
 60e:	9b 01       	movw	r18, r22
 610:	ac 01       	movw	r20, r24
 612:	bd 01       	movw	r22, r26
 614:	cf 01       	movw	r24, r30
 616:	08 95       	ret

00000618 <__itoa_ncheck>:
 618:	bb 27       	eor	r27, r27
 61a:	4a 30       	cpi	r20, 0x0A	; 10
 61c:	31 f4       	brne	.+12     	; 0x62a <__itoa_ncheck+0x12>
 61e:	99 23       	and	r25, r25
 620:	22 f4       	brpl	.+8      	; 0x62a <__itoa_ncheck+0x12>
 622:	bd e2       	ldi	r27, 0x2D	; 45
 624:	90 95       	com	r25
 626:	81 95       	neg	r24
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	0c 94 18 03 	jmp	0x630	; 0x630 <__utoa_common>

0000062e <__utoa_ncheck>:
 62e:	bb 27       	eor	r27, r27

00000630 <__utoa_common>:
 630:	fb 01       	movw	r30, r22
 632:	55 27       	eor	r21, r21
 634:	aa 27       	eor	r26, r26
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	aa 1f       	adc	r26, r26
 63c:	a4 17       	cp	r26, r20
 63e:	10 f0       	brcs	.+4      	; 0x644 <__utoa_common+0x14>
 640:	a4 1b       	sub	r26, r20
 642:	83 95       	inc	r24
 644:	50 51       	subi	r21, 0x10	; 16
 646:	b9 f7       	brne	.-18     	; 0x636 <__utoa_common+0x6>
 648:	a0 5d       	subi	r26, 0xD0	; 208
 64a:	aa 33       	cpi	r26, 0x3A	; 58
 64c:	08 f0       	brcs	.+2      	; 0x650 <__utoa_common+0x20>
 64e:	a9 5d       	subi	r26, 0xD9	; 217
 650:	a1 93       	st	Z+, r26
 652:	00 97       	sbiw	r24, 0x00	; 0
 654:	79 f7       	brne	.-34     	; 0x634 <__utoa_common+0x4>
 656:	b1 11       	cpse	r27, r1
 658:	b1 93       	st	Z+, r27
 65a:	11 92       	st	Z+, r1
 65c:	cb 01       	movw	r24, r22
 65e:	0c 94 31 03 	jmp	0x662	; 0x662 <strrev>

00000662 <strrev>:
 662:	dc 01       	movw	r26, r24
 664:	fc 01       	movw	r30, r24
 666:	67 2f       	mov	r22, r23
 668:	71 91       	ld	r23, Z+
 66a:	77 23       	and	r23, r23
 66c:	e1 f7       	brne	.-8      	; 0x666 <strrev+0x4>
 66e:	32 97       	sbiw	r30, 0x02	; 2
 670:	04 c0       	rjmp	.+8      	; 0x67a <strrev+0x18>
 672:	7c 91       	ld	r23, X
 674:	6d 93       	st	X+, r22
 676:	70 83       	st	Z, r23
 678:	62 91       	ld	r22, -Z
 67a:	ae 17       	cp	r26, r30
 67c:	bf 07       	cpc	r27, r31
 67e:	c8 f3       	brcs	.-14     	; 0x672 <strrev+0x10>
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
